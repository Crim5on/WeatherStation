
weatherStationSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c08  08003c08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000074  08003c84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003c84  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b048  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168d  00000000  00000000  0002b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001637e  00000000  00000000  0002dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b45b  00000000  00000000  00043f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5a1  00000000  00000000  0004f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e4  00000000  00000000  000dc994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b3c 	.word	0x08003b3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003b3c 	.word	0x08003b3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <dhtDataSet_parityCheck>:
	uint8_t parity_byte;    // lowest bits of sum of all other bytes
} DHTdataSet;

/** @returns true if parity check on dataSet was successful */
bool dhtDataSet_parityCheck(const DHTdataSet *dataSet)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	uint16_t checkSum16 = dataSet->humiByte_hi + dataSet->humiByte_lo + dataSet->tempByte_hi + dataSet->tempByte_lo;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	78db      	ldrb	r3, [r3, #3]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	81fb      	strh	r3, [r7, #14]
	uint8_t checkSum8 = (uint8_t) checkSum16;  // cut off bits higher position 7
 8000bdc:	89fb      	ldrh	r3, [r7, #14]
 8000bde:	737b      	strb	r3, [r7, #13]
	return (checkSum8 == dataSet->parity_byte);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	791b      	ldrb	r3, [r3, #4]
 8000be4:	7b7a      	ldrb	r2, [r7, #13]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	bf0c      	ite	eq
 8000bea:	2301      	moveq	r3, #1
 8000bec:	2300      	movne	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	0000      	movs	r0, r0
	...

08000c00 <dhtDataSet_calcHumidity>:

/** @returns humidity from raw data as int8_t */
int8_t dhtDataSet_calcHumidity(const DHTdataSet *dataSet)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	if (dataSet->humiByte_lo == 0) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d103      	bne.n	8000c18 <dhtDataSet_calcHumidity+0x18>
		return (int8_t) dataSet->humiByte_hi;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	e01a      	b.n	8000c4e <dhtDataSet_calcHumidity+0x4e>
	}
	else {
		uint16_t humidity_x10 = (dataSet->humiByte_hi << 8 | dataSet->humiByte_lo);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	785b      	ldrb	r3, [r3, #1]
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	81fb      	strh	r3, [r7, #14]
		return (int8_t) (humidity_x10 * 0.1);
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fdaa 	bl	8000788 <__aeabi_i2d>
 8000c34:	a308      	add	r3, pc, #32	; (adr r3, 8000c58 <dhtDataSet_calcHumidity+0x58>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb29 	bl	8000290 <__aeabi_dmul>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	f7ff fe09 	bl	800085c <__aeabi_d2iz>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b25b      	sxtb	r3, r3
	}
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	9999999a 	.word	0x9999999a
 8000c5c:	3fb99999 	.word	0x3fb99999

08000c60 <dhtDataSet_calcTemperature>:

/** @returns temperature from raw data as int8_t */
int8_t dhtDataSet_calcTemperature(const DHTdataSet *dataSet)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	uint8_t highByte = dataSet->tempByte_hi;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	789b      	ldrb	r3, [r3, #2]
 8000c6c:	73fb      	strb	r3, [r7, #15]
	uint8_t lowByte = dataSet->tempByte_lo;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	78db      	ldrb	r3, [r3, #3]
 8000c72:	73bb      	strb	r3, [r7, #14]
	bool isNegativeValue = BIT_IS_SET(highByte, 7);
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	09db      	lsrs	r3, r3, #7
 8000c7c:	737b      	strb	r3, [r7, #13]
	BIT_CLR(highByte, 7);
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c84:	73fb      	strb	r3, [r7, #15]

	if ((lowByte == 0) && (!isNegativeValue)) {
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d108      	bne.n	8000c9e <dhtDataSet_calcTemperature+0x3e>
 8000c8c:	7b7b      	ldrb	r3, [r7, #13]
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <dhtDataSet_calcTemperature+0x3e>
		return (int8_t) highByte;
 8000c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9c:	e04e      	b.n	8000d3c <dhtDataSet_calcTemperature+0xdc>
	}
	else if ((lowByte == 0) && (isNegativeValue)) {
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d107      	bne.n	8000cb4 <dhtDataSet_calcTemperature+0x54>
 8000ca4:	7b7b      	ldrb	r3, [r7, #13]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <dhtDataSet_calcTemperature+0x54>
		return (int8_t) (0 - highByte);
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	425b      	negs	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	e043      	b.n	8000d3c <dhtDataSet_calcTemperature+0xdc>
	}
	else if ((lowByte != 0) && (!isNegativeValue)) {
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d01f      	beq.n	8000cfa <dhtDataSet_calcTemperature+0x9a>
 8000cba:	7b7b      	ldrb	r3, [r7, #13]
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d019      	beq.n	8000cfa <dhtDataSet_calcTemperature+0x9a>
		uint16_t temperature_x10 = (highByte << 8 | lowByte);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	817b      	strh	r3, [r7, #10]
		return (int8_t) (temperature_x10 * 0.1);
 8000cd6:	897b      	ldrh	r3, [r7, #10]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd55 	bl	8000788 <__aeabi_i2d>
 8000cde:	a31a      	add	r3, pc, #104	; (adr r3, 8000d48 <dhtDataSet_calcTemperature+0xe8>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fad4 	bl	8000290 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f7ff fdb4 	bl	800085c <__aeabi_d2iz>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	e020      	b.n	8000d3c <dhtDataSet_calcTemperature+0xdc>
	}
	else if ((lowByte != 0) && (isNegativeValue)) {
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d01c      	beq.n	8000d3a <dhtDataSet_calcTemperature+0xda>
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d019      	beq.n	8000d3a <dhtDataSet_calcTemperature+0xda>
		uint16_t temperature_x10 = (highByte << 8 | lowByte);
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	813b      	strh	r3, [r7, #8]
		return (int8_t) (temperature_x10 * -0.1);
 8000d16:	893b      	ldrh	r3, [r7, #8]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fd35 	bl	8000788 <__aeabi_i2d>
 8000d1e:	a30c      	add	r3, pc, #48	; (adr r3, 8000d50 <dhtDataSet_calcTemperature+0xf0>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fab4 	bl	8000290 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff fd94 	bl	800085c <__aeabi_d2iz>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	e000      	b.n	8000d3c <dhtDataSet_calcTemperature+0xdc>
	}
	else {
		return EXIT_FAILURE;    // won't happen
 8000d3a:	2301      	movs	r3, #1
	}
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	f3af 8000 	nop.w
 8000d48:	9999999a 	.word	0x9999999a
 8000d4c:	3fb99999 	.word	0x3fb99999
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	bfb99999 	.word	0xbfb99999

08000d58 <printSerialLine>:

#define UART_TIMEOUT 100

/** prints string on serial line. */
void printSerialLine(UART_HandleTypeDef *handle, char stringBuffer[])
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	(void) strcat(stringBuffer, "\r\n");	// adds newLine and nullByte.
 8000d62:	6838      	ldr	r0, [r7, #0]
 8000d64:	f7ff fa3c 	bl	80001e0 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <printSerialLine+0x40>)
 8000d72:	8811      	ldrh	r1, [r2, #0]
 8000d74:	7892      	ldrb	r2, [r2, #2]
 8000d76:	8019      	strh	r1, [r3, #0]
 8000d78:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(handle, (uint8_t*) stringBuffer, strlen(stringBuffer), UART_TIMEOUT);
 8000d7a:	6838      	ldr	r0, [r7, #0]
 8000d7c:	f7ff fa30 	bl	80001e0 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	6839      	ldr	r1, [r7, #0]
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f001 feb4 	bl	8002af6 <HAL_UART_Transmit>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08003b54 	.word	0x08003b54

08000d9c <printValuesSerialLine>:

/** prints string on serial line. */
void printValuesSerialLine(UART_HandleTypeDef *handle, int temperature, int humidity)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b0c7      	sub	sp, #284	; 0x11c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000da6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000daa:	6018      	str	r0, [r3, #0]
 8000dac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000db0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000db4:	6019      	str	r1, [r3, #0]
 8000db6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000dba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000dbe:	601a      	str	r2, [r3, #0]
	char stringBuffer[255] = { '\0' };
 8000dc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000dc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	22fb      	movs	r2, #251	; 0xfb
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fa2e 	bl	8003234 <memset>
	char numberString[8] = { '\0' };
 8000dd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
	// build serial line:
	(void) strcat(stringBuffer, "Temperature: ");
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff f9f7 	bl	80001e0 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <printValuesSerialLine+0x120>)
 8000dfe:	461c      	mov	r4, r3
 8000e00:	4613      	mov	r3, r2
 8000e02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e04:	6020      	str	r0, [r4, #0]
 8000e06:	6061      	str	r1, [r4, #4]
 8000e08:	60a2      	str	r2, [r4, #8]
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	81a3      	strh	r3, [r4, #12]
	(void) sprintf(numberString, "%i", temperature);
 8000e0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e16:	f107 0010 	add.w	r0, r7, #16
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <printValuesSerialLine+0x124>)
 8000e1e:	f002 fa11 	bl	8003244 <siprintf>
	(void) strcat(stringBuffer, numberString);
 8000e22:	f107 0210 	add.w	r2, r7, #16
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 fa29 	bl	8003284 <strcat>
	(void) strcat(stringBuffer, "*C \tHumidity: ");
 8000e32:	f107 0318 	add.w	r3, r7, #24
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f9d2 	bl	80001e0 <strlen>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4413      	add	r3, r2
 8000e46:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <printValuesSerialLine+0x128>)
 8000e48:	461c      	mov	r4, r3
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e4e:	6020      	str	r0, [r4, #0]
 8000e50:	6061      	str	r1, [r4, #4]
 8000e52:	60a2      	str	r2, [r4, #8]
 8000e54:	881a      	ldrh	r2, [r3, #0]
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	81a2      	strh	r2, [r4, #12]
 8000e5a:	73a3      	strb	r3, [r4, #14]
	(void) sprintf(numberString, "%i", humidity);
 8000e5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e64:	f107 0010 	add.w	r0, r7, #16
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4915      	ldr	r1, [pc, #84]	; (8000ec0 <printValuesSerialLine+0x124>)
 8000e6c:	f002 f9ea 	bl	8003244 <siprintf>
	(void) strcat(stringBuffer, numberString);
 8000e70:	f107 0210 	add.w	r2, r7, #16
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fa02 	bl	8003284 <strcat>
	(void) strcat(stringBuffer, "%");
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9ab 	bl	80001e0 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	4413      	add	r3, r2
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <printValuesSerialLine+0x12c>)
 8000e96:	461a      	mov	r2, r3
 8000e98:	460b      	mov	r3, r1
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	8013      	strh	r3, [r2, #0]
	// send to uart to print (appends line-break)
	printSerialLine(handle, stringBuffer);
 8000e9e:	f107 0218 	add.w	r2, r7, #24
 8000ea2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ea6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eaa:	4611      	mov	r1, r2
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	f7ff ff53 	bl	8000d58 <printSerialLine>
}
 8000eb2:	bf00      	nop
 8000eb4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	08003b58 	.word	0x08003b58
 8000ec0:	08003b68 	.word	0x08003b68
 8000ec4:	08003b6c 	.word	0x08003b6c
 8000ec8:	08003b7c 	.word	0x08003b7c

08000ecc <delayMicroseconds>:

void delayMicroseconds(TIM_HandleTypeDef *timerHandle, uint16_t delay)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
	uint16_t timeStampStart = __HAL_TIM_GET_COUNTER(timerHandle);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	81fb      	strh	r3, [r7, #14]
	while ((__HAL_TIM_GET_COUNTER(timerHandle) - timeStampStart) < delay) {
 8000ee0:	bf00      	nop
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	1ad2      	subs	r2, r2, r3
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3f7      	bcc.n	8000ee2 <delayMicroseconds+0x16>
		; // wait
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <busyWaitWhile>:
#define HIGH 1

/** @returns waited time in microseconds */
static uint16_t busyWaitWhile(TIM_HandleTypeDef *timerHandle, GPIO_TypeDef *port, uint16_t dataPin,
		const GPIO_PinState val)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	460b      	mov	r3, r1
 8000f10:	80fb      	strh	r3, [r7, #6]
 8000f12:	4613      	mov	r3, r2
 8000f14:	717b      	strb	r3, [r7, #5]
	uint16_t loopCount = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	82fb      	strh	r3, [r7, #22]
	uint16_t timeStampStart = __HAL_TIM_GET_COUNTER(timerHandle);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	82bb      	strh	r3, [r7, #20]

	while ((HAL_GPIO_ReadPin(port, dataPin) == val) && (loopCount < LOOP_UPPER_BOUND)) {
 8000f22:	e002      	b.n	8000f2a <busyWaitWhile+0x2a>
		; // wait
		loopCount++;
 8000f24:	8afb      	ldrh	r3, [r7, #22]
 8000f26:	3301      	adds	r3, #1
 8000f28:	82fb      	strh	r3, [r7, #22]
	while ((HAL_GPIO_ReadPin(port, dataPin) == val) && (loopCount < LOOP_UPPER_BOUND)) {
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68b8      	ldr	r0, [r7, #8]
 8000f30:	f000 ff86 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	797b      	ldrb	r3, [r7, #5]
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d104      	bne.n	8000f48 <busyWaitWhile+0x48>
 8000f3e:	8afb      	ldrh	r3, [r7, #22]
 8000f40:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d9ed      	bls.n	8000f24 <busyWaitWhile+0x24>
	}
	uint16_t timeStampStop = __HAL_TIM_GET_COUNTER(timerHandle);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	827b      	strh	r3, [r7, #18]
	uint16_t timePassed = timeStampStop - timeStampStart;
 8000f50:	8a7a      	ldrh	r2, [r7, #18]
 8000f52:	8abb      	ldrh	r3, [r7, #20]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	823b      	strh	r3, [r7, #16]
	return timePassed;
 8000f58:	8a3b      	ldrh	r3, [r7, #16]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <pulse2Bit>:
/** helper for interpreting data pulses
 @returns 0 for pulse of ~27us
 @retruns 1 for pulse of ~70us
 */
static inline bool pulse2Bit(const uint16_t pulseTime_us)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	80fb      	strh	r3, [r7, #6]
	return ((pulseTime_us > 50) && (pulseTime_us < 90));
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2b32      	cmp	r3, #50	; 0x32
 8000f70:	d904      	bls.n	8000f7c <pulse2Bit+0x1a>
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	2b59      	cmp	r3, #89	; 0x59
 8000f76:	d801      	bhi.n	8000f7c <pulse2Bit+0x1a>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <pulse2Bit+0x1c>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <dht_protocol_performHandshake>:

/** @returns true if protocol handshake was successful */
static bool dht_protocol_performHandshake(TIM_HandleTypeDef *timerHandle, GPIO_TypeDef *port, uint16_t dataPin)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
	/*Re-Configure GPIO pin to OUTPUT : dhtDataPin_Pin */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dataPin;
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f000 fdb9 	bl	8001b38 <HAL_GPIO_Init>

	// SEND START SIGNAL:
	HAL_GPIO_WritePin(port, dataPin, LOW);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	68b8      	ldr	r0, [r7, #8]
 8000fce:	f000 ff4f 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_Delay(20);  // pull LOW for >18ms
 8000fd2:	2014      	movs	r0, #20
 8000fd4:	f000 fca6 	bl	8001924 <HAL_Delay>
	HAL_GPIO_WritePin(port, dataPin, HIGH);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f000 ff46 	bl	8001e70 <HAL_GPIO_WritePin>
	delayMicroseconds(timerHandle, 10);  // to ensure pin is set high
 8000fe4:	210a      	movs	r1, #10
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff ff70 	bl	8000ecc <delayMicroseconds>

	/*Re-Configure GPIO pin to INPUT : dhtDataPin_Pin */
	GPIO_InitStruct.Pin = dataPin;
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f000 fd9a 	bl	8001b38 <HAL_GPIO_Init>

	// READ RESPONSE SIGNAL: wait until sensor pulls the line low (80us) and high (80us)
	uint16_t loTime = busyWaitWhile(timerHandle, port, dataPin, LOW);
 8001004:	88fa      	ldrh	r2, [r7, #6]
 8001006:	2300      	movs	r3, #0
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff ff78 	bl	8000f00 <busyWaitWhile>
 8001010:	4603      	mov	r3, r0
 8001012:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t hiTime = busyWaitWhile(timerHandle, port, dataPin, HIGH);
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	2301      	movs	r3, #1
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff ff70 	bl	8000f00 <busyWaitWhile>
 8001020:	4603      	mov	r3, r0
 8001022:	84bb      	strh	r3, [r7, #36]	; 0x24
	// if impulses ~80us sensor will send data.
	return ((loTime < 100) && (hiTime < 100));
 8001024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001026:	2b63      	cmp	r3, #99	; 0x63
 8001028:	d804      	bhi.n	8001034 <dht_protocol_performHandshake+0xa4>
 800102a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800102c:	2b63      	cmp	r3, #99	; 0x63
 800102e:	d801      	bhi.n	8001034 <dht_protocol_performHandshake+0xa4>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <dht_protocol_performHandshake+0xa6>
 8001034:	2300      	movs	r3, #0
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <dht_protocol_receive40bits>:
/** reads 40 bits of data and writes them to the according byte in dataSet.
 @returns true if data read passed parity check.
 */
static bool dht_protocol_receive40bits(TIM_HandleTypeDef *timerHandle, GPIO_TypeDef *port, uint16_t dataPin,
		DHTdataSet *dataSet)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	80fb      	strh	r3, [r7, #6]

	 [ 0 - 7 ],  [ 8 - 15],  [16 - 23],  [24 - 31],  [32 - 39]
	 1111 1111,  1111 1111,  1111 1111,  1111 1111,  1111 1111
	 humi_hi,    humi_lo,    temp_hi,    temp_lo,    parity
	 */
	for (uint8_t i = 0; i < 40; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	75fb      	strb	r3, [r7, #23]
 8001058:	e0f3      	b.n	8001242 <dht_protocol_receive40bits+0x1fe>
		uint16_t loTime = busyWaitWhile(timerHandle, port, dataPin, LOW);
 800105a:	88fa      	ldrh	r2, [r7, #6]
 800105c:	2300      	movs	r3, #0
 800105e:	68b9      	ldr	r1, [r7, #8]
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff ff4d 	bl	8000f00 <busyWaitWhile>
 8001066:	4603      	mov	r3, r0
 8001068:	82bb      	strh	r3, [r7, #20]
		uint16_t hiTime = busyWaitWhile(timerHandle, port, dataPin, HIGH);
 800106a:	88fa      	ldrh	r2, [r7, #6]
 800106c:	2301      	movs	r3, #1
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff ff45 	bl	8000f00 <busyWaitWhile>
 8001076:	4603      	mov	r3, r0
 8001078:	827b      	strh	r3, [r7, #18]

		if ((loTime > PULSE_TIMEOUT_US) || (hiTime > PULSE_TIMEOUT_US)) {
 800107a:	8abb      	ldrh	r3, [r7, #20]
 800107c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001080:	4293      	cmp	r3, r2
 8001082:	d804      	bhi.n	800108e <dht_protocol_receive40bits+0x4a>
 8001084:	8a7b      	ldrh	r3, [r7, #18]
 8001086:	f644 6220 	movw	r2, #20000	; 0x4e20
 800108a:	4293      	cmp	r3, r2
 800108c:	d905      	bls.n	800109a <dht_protocol_receive40bits+0x56>
			HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001092:	f000 fc47 	bl	8001924 <HAL_Delay>
			return false;
 8001096:	2300      	movs	r3, #0
 8001098:	e0db      	b.n	8001252 <dht_protocol_receive40bits+0x20e>
		}

		if ((i >= 0) && (i <= 7)) {           // first byte
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b07      	cmp	r3, #7
 800109e:	d824      	bhi.n	80010ea <dht_protocol_receive40bits+0xa6>
			BIT_TO_VAL(dataSet->humiByte_hi, (7 - i), pulse2Bit(hiTime));
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff5d 	bl	8000f62 <pulse2Bit>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00d      	beq.n	80010ca <dht_protocol_receive40bits+0x86>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	f1c3 0307 	rsb	r3, r3, #7
 80010b8:	2101      	movs	r1, #1
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e0b8      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	f1c3 0307 	rsb	r3, r3, #7
 80010d4:	2101      	movs	r1, #1
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e0a8      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
		}
		else if ((i >= 8) && (i <= 15)) {     // second byte
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d927      	bls.n	8001140 <dht_protocol_receive40bits+0xfc>
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d824      	bhi.n	8001140 <dht_protocol_receive40bits+0xfc>
			BIT_TO_VAL(dataSet->humiByte_lo, (15 - i), pulse2Bit(hiTime));
 80010f6:	8a7b      	ldrh	r3, [r7, #18]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff32 	bl	8000f62 <pulse2Bit>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <dht_protocol_receive40bits+0xdc>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	785a      	ldrb	r2, [r3, #1]
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	f1c3 030f 	rsb	r3, r3, #15
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	705a      	strb	r2, [r3, #1]
 800111e:	e08d      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	785a      	ldrb	r2, [r3, #1]
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	f1c3 030f 	rsb	r3, r3, #15
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4013      	ands	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	705a      	strb	r2, [r3, #1]
 800113e:	e07d      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
		}
		else if ((i >= 16) && (i <= 23)) {     // third byte
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d927      	bls.n	8001196 <dht_protocol_receive40bits+0x152>
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	2b17      	cmp	r3, #23
 800114a:	d824      	bhi.n	8001196 <dht_protocol_receive40bits+0x152>
			BIT_TO_VAL(dataSet->tempByte_hi, (23 - i), pulse2Bit(hiTime));
 800114c:	8a7b      	ldrh	r3, [r7, #18]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff07 	bl	8000f62 <pulse2Bit>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00d      	beq.n	8001176 <dht_protocol_receive40bits+0x132>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	789a      	ldrb	r2, [r3, #2]
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	f1c3 0317 	rsb	r3, r3, #23
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b2da      	uxtb	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	709a      	strb	r2, [r3, #2]
 8001174:	e062      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	789a      	ldrb	r2, [r3, #2]
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	f1c3 0317 	rsb	r3, r3, #23
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4013      	ands	r3, r2
 800118e:	b2da      	uxtb	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	709a      	strb	r2, [r3, #2]
 8001194:	e052      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
		}
		else if ((i >= 24) && (i <= 31)) {    // fourth byte
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	2b17      	cmp	r3, #23
 800119a:	d925      	bls.n	80011e8 <dht_protocol_receive40bits+0x1a4>
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2b1f      	cmp	r3, #31
 80011a0:	d822      	bhi.n	80011e8 <dht_protocol_receive40bits+0x1a4>
			BIT_TO_VAL(dataSet->tempByte_lo, (31 - i), pulse2Bit(hiTime));
 80011a2:	8a7b      	ldrh	r3, [r7, #18]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fedc 	bl	8000f62 <pulse2Bit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00c      	beq.n	80011ca <dht_protocol_receive40bits+0x186>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	78da      	ldrb	r2, [r3, #3]
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80011ba:	fa21 f303 	lsr.w	r3, r1, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	70da      	strb	r2, [r3, #3]
 80011c8:	e038      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	78da      	ldrb	r2, [r3, #3]
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80011d4:	fa21 f303 	lsr.w	r3, r1, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4013      	ands	r3, r2
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	70da      	strb	r2, [r3, #3]
 80011e6:	e029      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
		}
		else if ((i >= 32) && (i <= 39)) {    // fifth byte
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b1f      	cmp	r3, #31
 80011ec:	d926      	bls.n	800123c <dht_protocol_receive40bits+0x1f8>
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	2b27      	cmp	r3, #39	; 0x27
 80011f2:	d823      	bhi.n	800123c <dht_protocol_receive40bits+0x1f8>
			BIT_TO_VAL(dataSet->parity_byte, (39 - i), pulse2Bit(hiTime));
 80011f4:	8a7b      	ldrh	r3, [r7, #18]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff feb3 	bl	8000f62 <pulse2Bit>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00d      	beq.n	800121e <dht_protocol_receive40bits+0x1da>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	791a      	ldrb	r2, [r3, #4]
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	711a      	strb	r2, [r3, #4]
 800121c:	e00e      	b.n	800123c <dht_protocol_receive40bits+0x1f8>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	791a      	ldrb	r2, [r3, #4]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4013      	ands	r3, r2
 8001236:	b2da      	uxtb	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	711a      	strb	r2, [r3, #4]
	for (uint8_t i = 0; i < 40; i++) {
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	3301      	adds	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	2b27      	cmp	r3, #39	; 0x27
 8001246:	f67f af08 	bls.w	800105a <dht_protocol_receive40bits+0x16>
		}
	}
	return dhtDataSet_parityCheck(dataSet);
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f7ff fcb0 	bl	8000bb0 <dhtDataSet_parityCheck>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <dht_protocol_readData>:

/** @returns true if filled valid data into dataSet, false otherwise */
bool dht_protocol_readData(TIM_HandleTypeDef *timerHandle, GPIO_TypeDef *port, uint16_t dataPin, DHTdataSet *dataSet)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]
	if (dht_protocol_performHandshake(timerHandle, port, dataPin)) {
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	461a      	mov	r2, r3
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff fe8d 	bl	8000f90 <dht_protocol_performHandshake>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <dht_protocol_readData+0x32>
		return dht_protocol_receive40bits(timerHandle, port, dataPin, dataSet);
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fede 	bl	8001044 <dht_protocol_receive40bits>
 8001288:	4603      	mov	r3, r0
 800128a:	e000      	b.n	800128e <dht_protocol_readData+0x34>
	}
	return false;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800129e:	f000 facf 	bl	8001840 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012a2:	f000 f863 	bl	800136c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012a6:	f000 f91b 	bl	80014e0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80012aa:	f000 f8ef 	bl	800148c <MX_USART2_UART_Init>
	MX_TIM10_Init();
 80012ae:	f000 f8c9 	bl	8001444 <MX_TIM10_Init>

	static DHTdataSet dataSet;
	static int8_t temperature = ABSOLUT_MIN_VAL;
	static int8_t humidity = ABSOLUT_MIN_VAL;

	HAL_Delay(1000);	// wait for one second after startup
 80012b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b6:	f000 fb35 	bl	8001924 <HAL_Delay>
	HAL_TIM_Base_Start(&htim10);	// start timer
 80012ba:	4825      	ldr	r0, [pc, #148]	; (8001350 <main+0xb8>)
 80012bc:	f001 faf4 	bl	80028a8 <HAL_TIM_Base_Start>

	char stringBuffer[] = "--------------------------------------------------";
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <main+0xbc>)
 80012c2:	1d3c      	adds	r4, r7, #4
 80012c4:	461d      	mov	r5, r3
 80012c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d2:	682b      	ldr	r3, [r5, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	8022      	strh	r2, [r4, #0]
 80012d8:	3402      	adds	r4, #2
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	7023      	strb	r3, [r4, #0]
	printSerialLine(&huart2, stringBuffer);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	481d      	ldr	r0, [pc, #116]	; (8001358 <main+0xc0>)
 80012e4:	f7ff fd38 	bl	8000d58 <printSerialLine>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (dht_protocol_readData(&htim10, dhtDataPin_GPIO_Port, dhtDataPin_Pin, &dataSet)) {
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <main+0xc4>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	491c      	ldr	r1, [pc, #112]	; (8001360 <main+0xc8>)
 80012f0:	4817      	ldr	r0, [pc, #92]	; (8001350 <main+0xb8>)
 80012f2:	f7ff ffb2 	bl	800125a <dht_protocol_readData>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00e      	beq.n	800131a <main+0x82>
			temperature = dhtDataSet_calcTemperature(&dataSet);
 80012fc:	4817      	ldr	r0, [pc, #92]	; (800135c <main+0xc4>)
 80012fe:	f7ff fcaf 	bl	8000c60 <dhtDataSet_calcTemperature>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <main+0xcc>)
 8001308:	701a      	strb	r2, [r3, #0]
			humidity = dhtDataSet_calcHumidity(&dataSet);
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <main+0xc4>)
 800130c:	f7ff fc78 	bl	8000c00 <dhtDataSet_calcHumidity>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <main+0xd0>)
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e005      	b.n	8001326 <main+0x8e>
		}
		else {
			temperature = ABSOLUT_MIN_VAL;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <main+0xcc>)
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	701a      	strb	r2, [r3, #0]
			humidity = ABSOLUT_MIN_VAL;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <main+0xd0>)
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	701a      	strb	r2, [r3, #0]
		}

		printValuesSerialLine(&huart2, temperature, humidity);
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <main+0xcc>)
 8001328:	f993 3000 	ldrsb.w	r3, [r3]
 800132c:	4619      	mov	r1, r3
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <main+0xd0>)
 8001330:	f993 3000 	ldrsb.w	r3, [r3]
 8001334:	461a      	mov	r2, r3
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <main+0xc0>)
 8001338:	f7ff fd30 	bl	8000d9c <printValuesSerialLine>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800133c:	2120      	movs	r1, #32
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <main+0xc8>)
 8001340:	f000 fdaf 	bl	8001ea2 <HAL_GPIO_TogglePin>
		HAL_Delay(SAMPLING_RATE_MS);
 8001344:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001348:	f000 faec 	bl	8001924 <HAL_Delay>
		if (dht_protocol_readData(&htim10, dhtDataPin_GPIO_Port, dhtDataPin_Pin, &dataSet)) {
 800134c:	e7cc      	b.n	80012e8 <main+0x50>
 800134e:	bf00      	nop
 8001350:	20000090 	.word	0x20000090
 8001354:	08003b80 	.word	0x08003b80
 8001358:	200000d8 	.word	0x200000d8
 800135c:	2000011c 	.word	0x2000011c
 8001360:	40020000 	.word	0x40020000
 8001364:	20000000 	.word	0x20000000
 8001368:	20000001 	.word	0x20000001

0800136c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	; 0x50
 8001370:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2230      	movs	r2, #48	; 0x30
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f001 ff5a 	bl	8003234 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <SystemClock_Config+0xd0>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <SystemClock_Config+0xd0>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <SystemClock_Config+0xd0>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <SystemClock_Config+0xd4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <SystemClock_Config+0xd4>)
 80013ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <SystemClock_Config+0xd4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d4:	2310      	movs	r3, #16
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013dc:	2300      	movs	r3, #0
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80013e0:	2310      	movs	r3, #16
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013e8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ea:	2304      	movs	r3, #4
 80013ec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ee:	2307      	movs	r3, #7
 80013f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fd6e 	bl	8001ed8 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x9a>
		Error_Handler();
 8001402:	f000 f8e9 	bl	80015d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001406:	230f      	movs	r3, #15
 8001408:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2302      	movs	r3, #2
 800140c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f000 ffd0 	bl	80023c8 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xc6>
		Error_Handler();
 800142e:	f000 f8d3 	bl	80015d8 <Error_Handler>
	}
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	; 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_TIM10_Init+0x40>)
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <MX_TIM10_Init+0x44>)
 800144c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 84 * 2 - 1;
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_TIM10_Init+0x40>)
 8001450:	22a7      	movs	r2, #167	; 0xa7
 8001452:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_TIM10_Init+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65536 - 1;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_TIM10_Init+0x40>)
 800145c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001460:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_TIM10_Init+0x40>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_TIM10_Init+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_TIM10_Init+0x40>)
 8001470:	f001 f9ca 	bl	8002808 <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM10_Init+0x3a>
		Error_Handler();
 800147a:	f000 f8ad 	bl	80015d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000090 	.word	0x20000090
 8001488:	40014400 	.word	0x40014400

0800148c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART2_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f001 faca 	bl	8002a5c <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014ce:	f000 f883 	bl	80015d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000d8 	.word	0x200000d8
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <MX_GPIO_Init+0xec>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a33      	ldr	r2, [pc, #204]	; (80015cc <MX_GPIO_Init+0xec>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <MX_GPIO_Init+0xec>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_GPIO_Init+0xec>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <MX_GPIO_Init+0xec>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <MX_GPIO_Init+0xec>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <MX_GPIO_Init+0xec>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <MX_GPIO_Init+0xec>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <MX_GPIO_Init+0xec>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_GPIO_Init+0xec>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <MX_GPIO_Init+0xec>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_GPIO_Init+0xec>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2120      	movs	r1, #32
 800156a:	4819      	ldr	r0, [pc, #100]	; (80015d0 <MX_GPIO_Init+0xf0>)
 800156c:	f000 fc80 	bl	8001e70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001574:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001576:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800157a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_GPIO_Init+0xf4>)
 8001588:	f000 fad6 	bl	8001b38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800158c:	2320      	movs	r3, #32
 800158e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_GPIO_Init+0xf0>)
 80015a4:	f000 fac8 	bl	8001b38 <HAL_GPIO_Init>

	/*Configure GPIO pin : dhtDataPin_Pin */
	GPIO_InitStruct.Pin = dhtDataPin_Pin;
 80015a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(dhtDataPin_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0xf0>)
 80015be:	f000 fabb 	bl	8001b38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020800 	.word	0x40020800

080015d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_MspInit+0x4c>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001622:	2007      	movs	r0, #7
 8001624:	f000 fa54 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_TIM_Base_MspInit+0x3c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10d      	bne.n	8001662 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_TIM_Base_MspInit+0x40>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_TIM_Base_MspInit+0x40>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_TIM_Base_MspInit+0x40>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40014400 	.word	0x40014400
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_UART_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12b      	bne.n	80016f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d2:	230c      	movs	r3, #12
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e2:	2307      	movs	r3, #7
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_UART_MspInit+0x8c>)
 80016ee:	f000 fa23 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40004400 	.word	0x40004400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f8c6 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f001 fd28 	bl	80031e0 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20018000 	.word	0x20018000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	20000124 	.word	0x20000124
 80017c4:	20000140 	.word	0x20000140

080017c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001808:	4c0b      	ldr	r4, [pc, #44]	; (8001838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001816:	f7ff ffd7 	bl	80017c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f001 fce7 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7ff fd3b 	bl	8001298 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001824:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001830:	08003c10 	.word	0x08003c10
  ldr r2, =_sbss
 8001834:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001838:	2000013c 	.word	0x2000013c

0800183c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_Init+0x40>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_Init+0x40>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_Init+0x40>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f931 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f808 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff feb6 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f93b 	bl	8001b1e <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c0:	f000 f911 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000004 	.word	0x20000004
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	20000008 	.word	0x20000008

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000128 	.word	0x20000128

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000128 	.word	0x20000128

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab0:	f7ff ff8e 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff47 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff5c 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff8e 	bl	8001a24 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5d 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffb0 	bl	8001a8c <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e159      	b.n	8001e08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 8148 	bne.w	8001e02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d005      	beq.n	8001b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d130      	bne.n	8001bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 0201 	and.w	r2, r3, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d017      	beq.n	8001c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80a2 	beq.w	8001e02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_GPIO_Init+0x2e8>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a56      	ldr	r2, [pc, #344]	; (8001e20 <HAL_GPIO_Init+0x2e8>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <HAL_GPIO_Init+0x2e8>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_GPIO_Init+0x2ec>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_GPIO_Init+0x2f0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d019      	beq.n	8001d3a <HAL_GPIO_Init+0x202>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2f4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_GPIO_Init+0x1fe>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_GPIO_Init+0x2f8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00d      	beq.n	8001d32 <HAL_GPIO_Init+0x1fa>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_GPIO_Init+0x2fc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d007      	beq.n	8001d2e <HAL_GPIO_Init+0x1f6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a45      	ldr	r2, [pc, #276]	; (8001e38 <HAL_GPIO_Init+0x300>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_GPIO_Init+0x1f2>
 8001d26:	2304      	movs	r3, #4
 8001d28:	e008      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e004      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e002      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	f002 0203 	and.w	r2, r2, #3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4093      	lsls	r3, r2
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4c:	4935      	ldr	r1, [pc, #212]	; (8001e24 <HAL_GPIO_Init+0x2ec>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7e:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd2:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	f67f aea2 	bls.w	8001b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40013c00 	.word	0x40013c00

08001e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e80:	787b      	ldrb	r3, [r7, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e8c:	e003      	b.n	8001e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	619a      	str	r2, [r3, #24]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	041a      	lsls	r2, r3, #16
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	619a      	str	r2, [r3, #24]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e267      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d075      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ef6:	4b88      	ldr	r3, [pc, #544]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d00c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d112      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0e:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1a:	d10b      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d05b      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x108>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d157      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e242      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0x74>
 8001f3e:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a75      	ldr	r2, [pc, #468]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e01d      	b.n	8001f88 <HAL_RCC_OscConfig+0xb0>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x98>
 8001f56:	4b70      	ldr	r3, [pc, #448]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6f      	ldr	r2, [pc, #444]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b6d      	ldr	r3, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6c      	ldr	r2, [pc, #432]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0xb0>
 8001f70:	4b69      	ldr	r3, [pc, #420]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a68      	ldr	r2, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d013      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fcbc 	bl	800190c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fcb8 	bl	800190c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e207      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0xc0>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fca8 	bl	800190c <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fca4 	bl	800190c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1f3      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xe8>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d063      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002002:	2b08      	cmp	r3, #8
 8002004:	d11c      	bne.n	8002040 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b44      	ldr	r3, [pc, #272]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d116      	bne.n	8002040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_RCC_OscConfig+0x152>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e1c7      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4937      	ldr	r1, [pc, #220]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	e03a      	b.n	80020b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <HAL_RCC_OscConfig+0x244>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7ff fc5d 	bl	800190c <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002056:	f7ff fc59 	bl	800190c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1a8      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4925      	ldr	r1, [pc, #148]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCC_OscConfig+0x244>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fc3c 	bl	800190c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff fc38 	bl	800190c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e187      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d036      	beq.n	8002130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d016      	beq.n	80020f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x248>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7ff fc1c 	bl	800190c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc18 	bl	800190c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e167      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x240>)
 80020ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x200>
 80020f6:	e01b      	b.n	8002130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_OscConfig+0x248>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fc05 	bl	800190c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	e00e      	b.n	8002124 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002106:	f7ff fc01 	bl	800190c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d907      	bls.n	8002124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e150      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
 8002118:	40023800 	.word	0x40023800
 800211c:	42470000 	.word	0x42470000
 8002120:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002124:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ea      	bne.n	8002106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8097 	beq.w	800226c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002142:	4b81      	ldr	r3, [pc, #516]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b7d      	ldr	r3, [pc, #500]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a7c      	ldr	r2, [pc, #496]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b7a      	ldr	r3, [pc, #488]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b77      	ldr	r3, [pc, #476]	; (800234c <HAL_RCC_OscConfig+0x474>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b74      	ldr	r3, [pc, #464]	; (800234c <HAL_RCC_OscConfig+0x474>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a73      	ldr	r2, [pc, #460]	; (800234c <HAL_RCC_OscConfig+0x474>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7ff fbc1 	bl	800190c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7ff fbbd 	bl	800190c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e10c      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x474>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2ea>
 80021b4:	4b64      	ldr	r3, [pc, #400]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a63      	ldr	r2, [pc, #396]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	e01c      	b.n	80021fc <HAL_RCC_OscConfig+0x324>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x30c>
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a5e      	ldr	r2, [pc, #376]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	4b5c      	ldr	r3, [pc, #368]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a5b      	ldr	r2, [pc, #364]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0x324>
 80021e4:	4b58      	ldr	r3, [pc, #352]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a57      	ldr	r2, [pc, #348]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	4b55      	ldr	r3, [pc, #340]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a54      	ldr	r2, [pc, #336]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d015      	beq.n	8002230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7ff fb82 	bl	800190c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7ff fb7e 	bl	800190c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0cb      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002222:	4b49      	ldr	r3, [pc, #292]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0ee      	beq.n	800220c <HAL_RCC_OscConfig+0x334>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7ff fb6c 	bl	800190c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	e00a      	b.n	800224e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002238:	f7ff fb68 	bl	800190c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0b5      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ee      	bne.n	8002238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	4a38      	ldr	r2, [pc, #224]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a1 	beq.w	80023b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d05c      	beq.n	800233c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d141      	bne.n	800230e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_RCC_OscConfig+0x478>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fb3c 	bl	800190c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7ff fb38 	bl	800190c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e087      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	491b      	ldr	r1, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x478>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fb11 	bl	800190c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7ff fb0d 	bl	800190c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e05c      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x416>
 800230c:	e054      	b.n	80023b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x478>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fafa 	bl	800190c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff faf6 	bl	800190c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e045      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x470>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x444>
 800233a:	e03d      	b.n	80023b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e038      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
 8002348:	40023800 	.word	0x40023800
 800234c:	40007000 	.word	0x40007000
 8002350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x4ec>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d028      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d121      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d11a      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800238a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800238c:	4293      	cmp	r3, r2
 800238e:	d111      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cc      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90c      	bls.n	8002404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a52      	ldr	r2, [pc, #328]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800243e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d044      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e067      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7ff fa28 	bl	800190c <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7ff fa24 	bl	800190c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e04f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d20c      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800254e:	f000 f821 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490a      	ldr	r1, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff f988 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	08003bb4 	.word	0x08003bb4
 800258c:	20000004 	.word	0x20000004
 8002590:	20000008 	.word	0x20000008

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002598:	b094      	sub	sp, #80	; 0x50
 800259a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	647b      	str	r3, [r7, #68]	; 0x44
 80025a0:	2300      	movs	r3, #0
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a4:	2300      	movs	r3, #0
 80025a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ac:	4b79      	ldr	r3, [pc, #484]	; (8002794 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d00d      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x40>
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	f200 80e1 	bhi.w	8002780 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x34>
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x3a>
 80025c6:	e0db      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b73      	ldr	r3, [pc, #460]	; (8002798 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025cc:	e0db      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ce:	4b73      	ldr	r3, [pc, #460]	; (800279c <HAL_RCC_GetSysClockFreq+0x208>)
 80025d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025d2:	e0d8      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025de:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d063      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30
 80025fe:	2300      	movs	r3, #0
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
 8002602:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002606:	4622      	mov	r2, r4
 8002608:	462b      	mov	r3, r5
 800260a:	f04f 0000 	mov.w	r0, #0
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	0159      	lsls	r1, r3, #5
 8002614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002618:	0150      	lsls	r0, r2, #5
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4621      	mov	r1, r4
 8002620:	1a51      	subs	r1, r2, r1
 8002622:	6139      	str	r1, [r7, #16]
 8002624:	4629      	mov	r1, r5
 8002626:	eb63 0301 	sbc.w	r3, r3, r1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002638:	4659      	mov	r1, fp
 800263a:	018b      	lsls	r3, r1, #6
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002642:	4651      	mov	r1, sl
 8002644:	018a      	lsls	r2, r1, #6
 8002646:	4651      	mov	r1, sl
 8002648:	ebb2 0801 	subs.w	r8, r2, r1
 800264c:	4659      	mov	r1, fp
 800264e:	eb63 0901 	sbc.w	r9, r3, r1
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800265e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002666:	4690      	mov	r8, r2
 8002668:	4699      	mov	r9, r3
 800266a:	4623      	mov	r3, r4
 800266c:	eb18 0303 	adds.w	r3, r8, r3
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	462b      	mov	r3, r5
 8002674:	eb49 0303 	adc.w	r3, r9, r3
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002686:	4629      	mov	r1, r5
 8002688:	024b      	lsls	r3, r1, #9
 800268a:	4621      	mov	r1, r4
 800268c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002690:	4621      	mov	r1, r4
 8002692:	024a      	lsls	r2, r1, #9
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	2200      	movs	r2, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
 800269e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026a4:	f7fe f902 	bl	80008ac <__aeabi_uldivmod>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4613      	mov	r3, r2
 80026ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b0:	e058      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b2:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	099b      	lsrs	r3, r3, #6
 80026b8:	2200      	movs	r2, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	4611      	mov	r1, r2
 80026be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
 80026c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	f04f 0000 	mov.w	r0, #0
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	0159      	lsls	r1, r3, #5
 80026da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026de:	0150      	lsls	r0, r2, #5
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4641      	mov	r1, r8
 80026e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ea:	4649      	mov	r1, r9
 80026ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002700:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002704:	ebb2 040a 	subs.w	r4, r2, sl
 8002708:	eb63 050b 	sbc.w	r5, r3, fp
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	00eb      	lsls	r3, r5, #3
 8002716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800271a:	00e2      	lsls	r2, r4, #3
 800271c:	4614      	mov	r4, r2
 800271e:	461d      	mov	r5, r3
 8002720:	4643      	mov	r3, r8
 8002722:	18e3      	adds	r3, r4, r3
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	464b      	mov	r3, r9
 8002728:	eb45 0303 	adc.w	r3, r5, r3
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800273a:	4629      	mov	r1, r5
 800273c:	028b      	lsls	r3, r1, #10
 800273e:	4621      	mov	r1, r4
 8002740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002744:	4621      	mov	r1, r4
 8002746:	028a      	lsls	r2, r1, #10
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274e:	2200      	movs	r2, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	61fa      	str	r2, [r7, #28]
 8002754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002758:	f7fe f8a8 	bl	80008ac <__aeabi_uldivmod>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4613      	mov	r3, r2
 8002762:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_GetSysClockFreq+0x200>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	3301      	adds	r3, #1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800277e:	e002      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetSysClockFreq+0x204>)
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002788:	4618      	mov	r0, r3
 800278a:	3750      	adds	r7, #80	; 0x50
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200

080027a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a9b      	lsrs	r3, r3, #10
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08003bc4 	.word	0x08003bc4

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027e4:	f7ff ffdc 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0b5b      	lsrs	r3, r3, #13
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	08003bc4 	.word	0x08003bc4

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e041      	b.n	800289e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe ff00 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 f888 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d001      	beq.n	80028c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e03c      	b.n	800293a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_TIM_Base_Start+0xa0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <HAL_TIM_Base_Start+0x5c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d013      	beq.n	8002904 <HAL_TIM_Base_Start+0x5c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1a      	ldr	r2, [pc, #104]	; (800294c <HAL_TIM_Base_Start+0xa4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <HAL_TIM_Base_Start+0x5c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_TIM_Base_Start+0xa8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_TIM_Base_Start+0x5c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_TIM_Base_Start+0xac>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIM_Base_Start+0x5c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_TIM_Base_Start+0xb0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d111      	bne.n	8002928 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d010      	beq.n	8002938 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	e007      	b.n	8002938 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40010000 	.word	0x40010000
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800
 8002954:	40000c00 	.word	0x40000c00
 8002958:	40014000 	.word	0x40014000

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <TIM_Base_SetConfig+0xe4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <TIM_Base_SetConfig+0xe8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <TIM_Base_SetConfig+0xec>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <TIM_Base_SetConfig+0xf0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <TIM_Base_SetConfig+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01b      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d017      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <TIM_Base_SetConfig+0xe8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <TIM_Base_SetConfig+0xec>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <TIM_Base_SetConfig+0xf0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <TIM_Base_SetConfig+0xf4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <TIM_Base_SetConfig+0xf8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <TIM_Base_SetConfig+0xfc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <TIM_Base_SetConfig+0xe4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d103      	bne.n	8002a2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	615a      	str	r2, [r3, #20]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40014000 	.word	0x40014000
 8002a54:	40014400 	.word	0x40014400
 8002a58:	40014800 	.word	0x40014800

08002a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e03f      	b.n	8002aee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe fdf8 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	; 0x24
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f929 	bl	8002cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b08a      	sub	sp, #40	; 0x28
 8002afa:	af02      	add	r7, sp, #8
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d17c      	bne.n	8002c10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_UART_Transmit+0x2c>
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e075      	b.n	8002c12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Transmit+0x3e>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e06e      	b.n	8002c12 <HAL_UART_Transmit+0x11c>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2221      	movs	r2, #33	; 0x21
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fedf 	bl	800190c <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b64:	d108      	bne.n	8002b78 <HAL_UART_Transmit+0x82>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	e003      	b.n	8002b80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b88:	e02a      	b.n	8002be0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f840 	bl	8002c1a <UART_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e036      	b.n	8002c12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e007      	b.n	8002bd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1cf      	bne.n	8002b8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2140      	movs	r1, #64	; 0x40
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f810 	bl	8002c1a <UART_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e006      	b.n	8002c12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b090      	sub	sp, #64	; 0x40
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2a:	e050      	b.n	8002cce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c32:	d04c      	beq.n	8002cce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3a:	f7fe fe67 	bl	800190c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d241      	bcs.n	8002cce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	330c      	adds	r3, #12
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c6a:	637a      	str	r2, [r7, #52]	; 0x34
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e5      	bne.n	8002c4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c9e:	623a      	str	r2, [r7, #32]
 8002ca0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	69f9      	ldr	r1, [r7, #28]
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e5      	bne.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e00f      	b.n	8002cee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d09f      	beq.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3740      	adds	r7, #64	; 0x40
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b0c0      	sub	sp, #256	; 0x100
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	68d9      	ldr	r1, [r3, #12]
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	ea40 0301 	orr.w	r3, r0, r1
 8002d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d50:	f021 010c 	bic.w	r1, r1, #12
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d72:	6999      	ldr	r1, [r3, #24]
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	ea40 0301 	orr.w	r3, r0, r1
 8002d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b8f      	ldr	r3, [pc, #572]	; (8002fc4 <UART_SetConfig+0x2cc>)
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d005      	beq.n	8002d98 <UART_SetConfig+0xa0>
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b8d      	ldr	r3, [pc, #564]	; (8002fc8 <UART_SetConfig+0x2d0>)
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d104      	bne.n	8002da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7ff fd22 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002da0:	e003      	b.n	8002daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002da2:	f7ff fd09 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8002da6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	f040 810c 	bne.w	8002fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dca:	4622      	mov	r2, r4
 8002dcc:	462b      	mov	r3, r5
 8002dce:	1891      	adds	r1, r2, r2
 8002dd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dd2:	415b      	adcs	r3, r3
 8002dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dda:	4621      	mov	r1, r4
 8002ddc:	eb12 0801 	adds.w	r8, r2, r1
 8002de0:	4629      	mov	r1, r5
 8002de2:	eb43 0901 	adc.w	r9, r3, r1
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dfa:	4690      	mov	r8, r2
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	4623      	mov	r3, r4
 8002e00:	eb18 0303 	adds.w	r3, r8, r3
 8002e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e08:	462b      	mov	r3, r5
 8002e0a:	eb49 0303 	adc.w	r3, r9, r3
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e26:	460b      	mov	r3, r1
 8002e28:	18db      	adds	r3, r3, r3
 8002e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	eb42 0303 	adc.w	r3, r2, r3
 8002e32:	657b      	str	r3, [r7, #84]	; 0x54
 8002e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e3c:	f7fd fd36 	bl	80008ac <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002e46:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	011c      	lsls	r4, r3, #4
 8002e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	1891      	adds	r1, r2, r2
 8002e66:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e68:	415b      	adcs	r3, r3
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e70:	4641      	mov	r1, r8
 8002e72:	eb12 0a01 	adds.w	sl, r2, r1
 8002e76:	4649      	mov	r1, r9
 8002e78:	eb43 0b01 	adc.w	fp, r3, r1
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e90:	4692      	mov	sl, r2
 8002e92:	469b      	mov	fp, r3
 8002e94:	4643      	mov	r3, r8
 8002e96:	eb1a 0303 	adds.w	r3, sl, r3
 8002e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	18db      	adds	r3, r3, r3
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ed2:	f7fd fceb 	bl	80008ac <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002ede:	fba3 2301 	umull	r2, r3, r3, r1
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2264      	movs	r2, #100	; 0x64
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	1acb      	subs	r3, r1, r3
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ef2:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f00:	441c      	add	r4, r3
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f24:	4641      	mov	r1, r8
 8002f26:	1851      	adds	r1, r2, r1
 8002f28:	6339      	str	r1, [r7, #48]	; 0x30
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	414b      	adcs	r3, r1
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	00cb      	lsls	r3, r1, #3
 8002f40:	4651      	mov	r1, sl
 8002f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f46:	4651      	mov	r1, sl
 8002f48:	00ca      	lsls	r2, r1, #3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4642      	mov	r2, r8
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f58:	464b      	mov	r3, r9
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	eb42 0303 	adc.w	r3, r2, r3
 8002f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f78:	460b      	mov	r3, r1
 8002f7a:	18db      	adds	r3, r3, r3
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7e:	4613      	mov	r3, r2
 8002f80:	eb42 0303 	adc.w	r3, r2, r3
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f8e:	f7fd fc8d 	bl	80008ac <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002f98:	fba3 1302 	umull	r1, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	2164      	movs	r1, #100	; 0x64
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	3332      	adds	r3, #50	; 0x32
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	f003 0207 	and.w	r2, r3, #7
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4422      	add	r2, r4
 8002fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fc0:	e105      	b.n	80031ce <UART_SetConfig+0x4d6>
 8002fc2:	bf00      	nop
 8002fc4:	40011000 	.word	0x40011000
 8002fc8:	40011400 	.word	0x40011400
 8002fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	1891      	adds	r1, r2, r2
 8002fe8:	6239      	str	r1, [r7, #32]
 8002fea:	415b      	adcs	r3, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	1854      	adds	r4, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb43 0501 	adc.w	r5, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	00eb      	lsls	r3, r5, #3
 8003006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300a:	00e2      	lsls	r2, r4, #3
 800300c:	4614      	mov	r4, r2
 800300e:	461d      	mov	r5, r3
 8003010:	4643      	mov	r3, r8
 8003012:	18e3      	adds	r3, r4, r3
 8003014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003018:	464b      	mov	r3, r9
 800301a:	eb45 0303 	adc.w	r3, r5, r3
 800301e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800302e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800303e:	4629      	mov	r1, r5
 8003040:	008b      	lsls	r3, r1, #2
 8003042:	4621      	mov	r1, r4
 8003044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003048:	4621      	mov	r1, r4
 800304a:	008a      	lsls	r2, r1, #2
 800304c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003050:	f7fd fc2c 	bl	80008ac <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <UART_SetConfig+0x4e4>)
 800305a:	fba3 2302 	umull	r2, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	011c      	lsls	r4, r3, #4
 8003062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800306c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003074:	4642      	mov	r2, r8
 8003076:	464b      	mov	r3, r9
 8003078:	1891      	adds	r1, r2, r2
 800307a:	61b9      	str	r1, [r7, #24]
 800307c:	415b      	adcs	r3, r3
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003084:	4641      	mov	r1, r8
 8003086:	1851      	adds	r1, r2, r1
 8003088:	6139      	str	r1, [r7, #16]
 800308a:	4649      	mov	r1, r9
 800308c:	414b      	adcs	r3, r1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800309c:	4659      	mov	r1, fp
 800309e:	00cb      	lsls	r3, r1, #3
 80030a0:	4651      	mov	r1, sl
 80030a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030a6:	4651      	mov	r1, sl
 80030a8:	00ca      	lsls	r2, r1, #3
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	4642      	mov	r2, r8
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030b8:	464b      	mov	r3, r9
 80030ba:	460a      	mov	r2, r1
 80030bc:	eb42 0303 	adc.w	r3, r2, r3
 80030c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030dc:	4649      	mov	r1, r9
 80030de:	008b      	lsls	r3, r1, #2
 80030e0:	4641      	mov	r1, r8
 80030e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e6:	4641      	mov	r1, r8
 80030e8:	008a      	lsls	r2, r1, #2
 80030ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030ee:	f7fd fbdd 	bl	80008ac <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <UART_SetConfig+0x4e4>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a34      	ldr	r2, [pc, #208]	; (80031dc <UART_SetConfig+0x4e4>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003116:	441c      	add	r4, r3
 8003118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311c:	2200      	movs	r2, #0
 800311e:	673b      	str	r3, [r7, #112]	; 0x70
 8003120:	677a      	str	r2, [r7, #116]	; 0x74
 8003122:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003126:	4642      	mov	r2, r8
 8003128:	464b      	mov	r3, r9
 800312a:	1891      	adds	r1, r2, r2
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	415b      	adcs	r3, r3
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003136:	4641      	mov	r1, r8
 8003138:	1851      	adds	r1, r2, r1
 800313a:	6039      	str	r1, [r7, #0]
 800313c:	4649      	mov	r1, r9
 800313e:	414b      	adcs	r3, r1
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800314e:	4659      	mov	r1, fp
 8003150:	00cb      	lsls	r3, r1, #3
 8003152:	4651      	mov	r1, sl
 8003154:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003158:	4651      	mov	r1, sl
 800315a:	00ca      	lsls	r2, r1, #3
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	4603      	mov	r3, r0
 8003162:	4642      	mov	r2, r8
 8003164:	189b      	adds	r3, r3, r2
 8003166:	66bb      	str	r3, [r7, #104]	; 0x68
 8003168:	464b      	mov	r3, r9
 800316a:	460a      	mov	r2, r1
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	663b      	str	r3, [r7, #96]	; 0x60
 800317c:	667a      	str	r2, [r7, #100]	; 0x64
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800318a:	4649      	mov	r1, r9
 800318c:	008b      	lsls	r3, r1, #2
 800318e:	4641      	mov	r1, r8
 8003190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003194:	4641      	mov	r1, r8
 8003196:	008a      	lsls	r2, r1, #2
 8003198:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800319c:	f7fd fb86 	bl	80008ac <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <UART_SetConfig+0x4e4>)
 80031a6:	fba3 1302 	umull	r1, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2164      	movs	r1, #100	; 0x64
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	3332      	adds	r3, #50	; 0x32
 80031b8:	4a08      	ldr	r2, [pc, #32]	; (80031dc <UART_SetConfig+0x4e4>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4422      	add	r2, r4
 80031cc:	609a      	str	r2, [r3, #8]
}
 80031ce:	bf00      	nop
 80031d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031da:	bf00      	nop
 80031dc:	51eb851f 	.word	0x51eb851f

080031e0 <__errno>:
 80031e0:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <__errno+0x8>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000010 	.word	0x20000010

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	4d0d      	ldr	r5, [pc, #52]	; (8003224 <__libc_init_array+0x38>)
 80031f0:	4c0d      	ldr	r4, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f2:	1b64      	subs	r4, r4, r5
 80031f4:	10a4      	asrs	r4, r4, #2
 80031f6:	2600      	movs	r6, #0
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	4d0b      	ldr	r5, [pc, #44]	; (800322c <__libc_init_array+0x40>)
 80031fe:	4c0c      	ldr	r4, [pc, #48]	; (8003230 <__libc_init_array+0x44>)
 8003200:	f000 fc9c 	bl	8003b3c <_init>
 8003204:	1b64      	subs	r4, r4, r5
 8003206:	10a4      	asrs	r4, r4, #2
 8003208:	2600      	movs	r6, #0
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	f855 3b04 	ldr.w	r3, [r5], #4
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	f855 3b04 	ldr.w	r3, [r5], #4
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	08003c08 	.word	0x08003c08
 8003228:	08003c08 	.word	0x08003c08
 800322c:	08003c08 	.word	0x08003c08
 8003230:	08003c0c 	.word	0x08003c0c

08003234 <memset>:
 8003234:	4402      	add	r2, r0
 8003236:	4603      	mov	r3, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <siprintf>:
 8003244:	b40e      	push	{r1, r2, r3}
 8003246:	b500      	push	{lr}
 8003248:	b09c      	sub	sp, #112	; 0x70
 800324a:	ab1d      	add	r3, sp, #116	; 0x74
 800324c:	9002      	str	r0, [sp, #8]
 800324e:	9006      	str	r0, [sp, #24]
 8003250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003254:	4809      	ldr	r0, [pc, #36]	; (800327c <siprintf+0x38>)
 8003256:	9107      	str	r1, [sp, #28]
 8003258:	9104      	str	r1, [sp, #16]
 800325a:	4909      	ldr	r1, [pc, #36]	; (8003280 <siprintf+0x3c>)
 800325c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003260:	9105      	str	r1, [sp, #20]
 8003262:	6800      	ldr	r0, [r0, #0]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	a902      	add	r1, sp, #8
 8003268:	f000 f876 	bl	8003358 <_svfiprintf_r>
 800326c:	9b02      	ldr	r3, [sp, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	b01c      	add	sp, #112	; 0x70
 8003274:	f85d eb04 	ldr.w	lr, [sp], #4
 8003278:	b003      	add	sp, #12
 800327a:	4770      	bx	lr
 800327c:	20000010 	.word	0x20000010
 8003280:	ffff0208 	.word	0xffff0208

08003284 <strcat>:
 8003284:	b510      	push	{r4, lr}
 8003286:	4602      	mov	r2, r0
 8003288:	7814      	ldrb	r4, [r2, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	3201      	adds	r2, #1
 800328e:	2c00      	cmp	r4, #0
 8003290:	d1fa      	bne.n	8003288 <strcat+0x4>
 8003292:	3b01      	subs	r3, #1
 8003294:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003298:	f803 2f01 	strb.w	r2, [r3, #1]!
 800329c:	2a00      	cmp	r2, #0
 800329e:	d1f9      	bne.n	8003294 <strcat+0x10>
 80032a0:	bd10      	pop	{r4, pc}

080032a2 <__ssputs_r>:
 80032a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a6:	688e      	ldr	r6, [r1, #8]
 80032a8:	429e      	cmp	r6, r3
 80032aa:	4682      	mov	sl, r0
 80032ac:	460c      	mov	r4, r1
 80032ae:	4690      	mov	r8, r2
 80032b0:	461f      	mov	r7, r3
 80032b2:	d838      	bhi.n	8003326 <__ssputs_r+0x84>
 80032b4:	898a      	ldrh	r2, [r1, #12]
 80032b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032ba:	d032      	beq.n	8003322 <__ssputs_r+0x80>
 80032bc:	6825      	ldr	r5, [r4, #0]
 80032be:	6909      	ldr	r1, [r1, #16]
 80032c0:	eba5 0901 	sub.w	r9, r5, r1
 80032c4:	6965      	ldr	r5, [r4, #20]
 80032c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032ce:	3301      	adds	r3, #1
 80032d0:	444b      	add	r3, r9
 80032d2:	106d      	asrs	r5, r5, #1
 80032d4:	429d      	cmp	r5, r3
 80032d6:	bf38      	it	cc
 80032d8:	461d      	movcc	r5, r3
 80032da:	0553      	lsls	r3, r2, #21
 80032dc:	d531      	bpl.n	8003342 <__ssputs_r+0xa0>
 80032de:	4629      	mov	r1, r5
 80032e0:	f000 fb62 	bl	80039a8 <_malloc_r>
 80032e4:	4606      	mov	r6, r0
 80032e6:	b950      	cbnz	r0, 80032fe <__ssputs_r+0x5c>
 80032e8:	230c      	movs	r3, #12
 80032ea:	f8ca 3000 	str.w	r3, [sl]
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f4:	81a3      	strh	r3, [r4, #12]
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032fe:	6921      	ldr	r1, [r4, #16]
 8003300:	464a      	mov	r2, r9
 8003302:	f000 fabd 	bl	8003880 <memcpy>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800330c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003310:	81a3      	strh	r3, [r4, #12]
 8003312:	6126      	str	r6, [r4, #16]
 8003314:	6165      	str	r5, [r4, #20]
 8003316:	444e      	add	r6, r9
 8003318:	eba5 0509 	sub.w	r5, r5, r9
 800331c:	6026      	str	r6, [r4, #0]
 800331e:	60a5      	str	r5, [r4, #8]
 8003320:	463e      	mov	r6, r7
 8003322:	42be      	cmp	r6, r7
 8003324:	d900      	bls.n	8003328 <__ssputs_r+0x86>
 8003326:	463e      	mov	r6, r7
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	4632      	mov	r2, r6
 800332c:	4641      	mov	r1, r8
 800332e:	f000 fab5 	bl	800389c <memmove>
 8003332:	68a3      	ldr	r3, [r4, #8]
 8003334:	1b9b      	subs	r3, r3, r6
 8003336:	60a3      	str	r3, [r4, #8]
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	4433      	add	r3, r6
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	2000      	movs	r0, #0
 8003340:	e7db      	b.n	80032fa <__ssputs_r+0x58>
 8003342:	462a      	mov	r2, r5
 8003344:	f000 fba4 	bl	8003a90 <_realloc_r>
 8003348:	4606      	mov	r6, r0
 800334a:	2800      	cmp	r0, #0
 800334c:	d1e1      	bne.n	8003312 <__ssputs_r+0x70>
 800334e:	6921      	ldr	r1, [r4, #16]
 8003350:	4650      	mov	r0, sl
 8003352:	f000 fabd 	bl	80038d0 <_free_r>
 8003356:	e7c7      	b.n	80032e8 <__ssputs_r+0x46>

08003358 <_svfiprintf_r>:
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	4698      	mov	r8, r3
 800335e:	898b      	ldrh	r3, [r1, #12]
 8003360:	061b      	lsls	r3, r3, #24
 8003362:	b09d      	sub	sp, #116	; 0x74
 8003364:	4607      	mov	r7, r0
 8003366:	460d      	mov	r5, r1
 8003368:	4614      	mov	r4, r2
 800336a:	d50e      	bpl.n	800338a <_svfiprintf_r+0x32>
 800336c:	690b      	ldr	r3, [r1, #16]
 800336e:	b963      	cbnz	r3, 800338a <_svfiprintf_r+0x32>
 8003370:	2140      	movs	r1, #64	; 0x40
 8003372:	f000 fb19 	bl	80039a8 <_malloc_r>
 8003376:	6028      	str	r0, [r5, #0]
 8003378:	6128      	str	r0, [r5, #16]
 800337a:	b920      	cbnz	r0, 8003386 <_svfiprintf_r+0x2e>
 800337c:	230c      	movs	r3, #12
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003384:	e0d1      	b.n	800352a <_svfiprintf_r+0x1d2>
 8003386:	2340      	movs	r3, #64	; 0x40
 8003388:	616b      	str	r3, [r5, #20]
 800338a:	2300      	movs	r3, #0
 800338c:	9309      	str	r3, [sp, #36]	; 0x24
 800338e:	2320      	movs	r3, #32
 8003390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003394:	f8cd 800c 	str.w	r8, [sp, #12]
 8003398:	2330      	movs	r3, #48	; 0x30
 800339a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003544 <_svfiprintf_r+0x1ec>
 800339e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033a2:	f04f 0901 	mov.w	r9, #1
 80033a6:	4623      	mov	r3, r4
 80033a8:	469a      	mov	sl, r3
 80033aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ae:	b10a      	cbz	r2, 80033b4 <_svfiprintf_r+0x5c>
 80033b0:	2a25      	cmp	r2, #37	; 0x25
 80033b2:	d1f9      	bne.n	80033a8 <_svfiprintf_r+0x50>
 80033b4:	ebba 0b04 	subs.w	fp, sl, r4
 80033b8:	d00b      	beq.n	80033d2 <_svfiprintf_r+0x7a>
 80033ba:	465b      	mov	r3, fp
 80033bc:	4622      	mov	r2, r4
 80033be:	4629      	mov	r1, r5
 80033c0:	4638      	mov	r0, r7
 80033c2:	f7ff ff6e 	bl	80032a2 <__ssputs_r>
 80033c6:	3001      	adds	r0, #1
 80033c8:	f000 80aa 	beq.w	8003520 <_svfiprintf_r+0x1c8>
 80033cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ce:	445a      	add	r2, fp
 80033d0:	9209      	str	r2, [sp, #36]	; 0x24
 80033d2:	f89a 3000 	ldrb.w	r3, [sl]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80a2 	beq.w	8003520 <_svfiprintf_r+0x1c8>
 80033dc:	2300      	movs	r3, #0
 80033de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e6:	f10a 0a01 	add.w	sl, sl, #1
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	9307      	str	r3, [sp, #28]
 80033ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033f2:	931a      	str	r3, [sp, #104]	; 0x68
 80033f4:	4654      	mov	r4, sl
 80033f6:	2205      	movs	r2, #5
 80033f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033fc:	4851      	ldr	r0, [pc, #324]	; (8003544 <_svfiprintf_r+0x1ec>)
 80033fe:	f7fc fef7 	bl	80001f0 <memchr>
 8003402:	9a04      	ldr	r2, [sp, #16]
 8003404:	b9d8      	cbnz	r0, 800343e <_svfiprintf_r+0xe6>
 8003406:	06d0      	lsls	r0, r2, #27
 8003408:	bf44      	itt	mi
 800340a:	2320      	movmi	r3, #32
 800340c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003410:	0711      	lsls	r1, r2, #28
 8003412:	bf44      	itt	mi
 8003414:	232b      	movmi	r3, #43	; 0x2b
 8003416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800341a:	f89a 3000 	ldrb.w	r3, [sl]
 800341e:	2b2a      	cmp	r3, #42	; 0x2a
 8003420:	d015      	beq.n	800344e <_svfiprintf_r+0xf6>
 8003422:	9a07      	ldr	r2, [sp, #28]
 8003424:	4654      	mov	r4, sl
 8003426:	2000      	movs	r0, #0
 8003428:	f04f 0c0a 	mov.w	ip, #10
 800342c:	4621      	mov	r1, r4
 800342e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003432:	3b30      	subs	r3, #48	; 0x30
 8003434:	2b09      	cmp	r3, #9
 8003436:	d94e      	bls.n	80034d6 <_svfiprintf_r+0x17e>
 8003438:	b1b0      	cbz	r0, 8003468 <_svfiprintf_r+0x110>
 800343a:	9207      	str	r2, [sp, #28]
 800343c:	e014      	b.n	8003468 <_svfiprintf_r+0x110>
 800343e:	eba0 0308 	sub.w	r3, r0, r8
 8003442:	fa09 f303 	lsl.w	r3, r9, r3
 8003446:	4313      	orrs	r3, r2
 8003448:	9304      	str	r3, [sp, #16]
 800344a:	46a2      	mov	sl, r4
 800344c:	e7d2      	b.n	80033f4 <_svfiprintf_r+0x9c>
 800344e:	9b03      	ldr	r3, [sp, #12]
 8003450:	1d19      	adds	r1, r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	9103      	str	r1, [sp, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfbb      	ittet	lt
 800345a:	425b      	neglt	r3, r3
 800345c:	f042 0202 	orrlt.w	r2, r2, #2
 8003460:	9307      	strge	r3, [sp, #28]
 8003462:	9307      	strlt	r3, [sp, #28]
 8003464:	bfb8      	it	lt
 8003466:	9204      	strlt	r2, [sp, #16]
 8003468:	7823      	ldrb	r3, [r4, #0]
 800346a:	2b2e      	cmp	r3, #46	; 0x2e
 800346c:	d10c      	bne.n	8003488 <_svfiprintf_r+0x130>
 800346e:	7863      	ldrb	r3, [r4, #1]
 8003470:	2b2a      	cmp	r3, #42	; 0x2a
 8003472:	d135      	bne.n	80034e0 <_svfiprintf_r+0x188>
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	bfb8      	it	lt
 8003480:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003484:	3402      	adds	r4, #2
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003554 <_svfiprintf_r+0x1fc>
 800348c:	7821      	ldrb	r1, [r4, #0]
 800348e:	2203      	movs	r2, #3
 8003490:	4650      	mov	r0, sl
 8003492:	f7fc fead 	bl	80001f0 <memchr>
 8003496:	b140      	cbz	r0, 80034aa <_svfiprintf_r+0x152>
 8003498:	2340      	movs	r3, #64	; 0x40
 800349a:	eba0 000a 	sub.w	r0, r0, sl
 800349e:	fa03 f000 	lsl.w	r0, r3, r0
 80034a2:	9b04      	ldr	r3, [sp, #16]
 80034a4:	4303      	orrs	r3, r0
 80034a6:	3401      	adds	r4, #1
 80034a8:	9304      	str	r3, [sp, #16]
 80034aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ae:	4826      	ldr	r0, [pc, #152]	; (8003548 <_svfiprintf_r+0x1f0>)
 80034b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034b4:	2206      	movs	r2, #6
 80034b6:	f7fc fe9b 	bl	80001f0 <memchr>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d038      	beq.n	8003530 <_svfiprintf_r+0x1d8>
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <_svfiprintf_r+0x1f4>)
 80034c0:	bb1b      	cbnz	r3, 800350a <_svfiprintf_r+0x1b2>
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	3307      	adds	r3, #7
 80034c6:	f023 0307 	bic.w	r3, r3, #7
 80034ca:	3308      	adds	r3, #8
 80034cc:	9303      	str	r3, [sp, #12]
 80034ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d0:	4433      	add	r3, r6
 80034d2:	9309      	str	r3, [sp, #36]	; 0x24
 80034d4:	e767      	b.n	80033a6 <_svfiprintf_r+0x4e>
 80034d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034da:	460c      	mov	r4, r1
 80034dc:	2001      	movs	r0, #1
 80034de:	e7a5      	b.n	800342c <_svfiprintf_r+0xd4>
 80034e0:	2300      	movs	r3, #0
 80034e2:	3401      	adds	r4, #1
 80034e4:	9305      	str	r3, [sp, #20]
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 0c0a 	mov.w	ip, #10
 80034ec:	4620      	mov	r0, r4
 80034ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034f2:	3a30      	subs	r2, #48	; 0x30
 80034f4:	2a09      	cmp	r2, #9
 80034f6:	d903      	bls.n	8003500 <_svfiprintf_r+0x1a8>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0c5      	beq.n	8003488 <_svfiprintf_r+0x130>
 80034fc:	9105      	str	r1, [sp, #20]
 80034fe:	e7c3      	b.n	8003488 <_svfiprintf_r+0x130>
 8003500:	fb0c 2101 	mla	r1, ip, r1, r2
 8003504:	4604      	mov	r4, r0
 8003506:	2301      	movs	r3, #1
 8003508:	e7f0      	b.n	80034ec <_svfiprintf_r+0x194>
 800350a:	ab03      	add	r3, sp, #12
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	462a      	mov	r2, r5
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <_svfiprintf_r+0x1f8>)
 8003512:	a904      	add	r1, sp, #16
 8003514:	4638      	mov	r0, r7
 8003516:	f3af 8000 	nop.w
 800351a:	1c42      	adds	r2, r0, #1
 800351c:	4606      	mov	r6, r0
 800351e:	d1d6      	bne.n	80034ce <_svfiprintf_r+0x176>
 8003520:	89ab      	ldrh	r3, [r5, #12]
 8003522:	065b      	lsls	r3, r3, #25
 8003524:	f53f af2c 	bmi.w	8003380 <_svfiprintf_r+0x28>
 8003528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800352a:	b01d      	add	sp, #116	; 0x74
 800352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003530:	ab03      	add	r3, sp, #12
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	462a      	mov	r2, r5
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <_svfiprintf_r+0x1f8>)
 8003538:	a904      	add	r1, sp, #16
 800353a:	4638      	mov	r0, r7
 800353c:	f000 f87a 	bl	8003634 <_printf_i>
 8003540:	e7eb      	b.n	800351a <_svfiprintf_r+0x1c2>
 8003542:	bf00      	nop
 8003544:	08003bcc 	.word	0x08003bcc
 8003548:	08003bd6 	.word	0x08003bd6
 800354c:	00000000 	.word	0x00000000
 8003550:	080032a3 	.word	0x080032a3
 8003554:	08003bd2 	.word	0x08003bd2

08003558 <_printf_common>:
 8003558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	4616      	mov	r6, r2
 800355e:	4699      	mov	r9, r3
 8003560:	688a      	ldr	r2, [r1, #8]
 8003562:	690b      	ldr	r3, [r1, #16]
 8003564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003568:	4293      	cmp	r3, r2
 800356a:	bfb8      	it	lt
 800356c:	4613      	movlt	r3, r2
 800356e:	6033      	str	r3, [r6, #0]
 8003570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003574:	4607      	mov	r7, r0
 8003576:	460c      	mov	r4, r1
 8003578:	b10a      	cbz	r2, 800357e <_printf_common+0x26>
 800357a:	3301      	adds	r3, #1
 800357c:	6033      	str	r3, [r6, #0]
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	0699      	lsls	r1, r3, #26
 8003582:	bf42      	ittt	mi
 8003584:	6833      	ldrmi	r3, [r6, #0]
 8003586:	3302      	addmi	r3, #2
 8003588:	6033      	strmi	r3, [r6, #0]
 800358a:	6825      	ldr	r5, [r4, #0]
 800358c:	f015 0506 	ands.w	r5, r5, #6
 8003590:	d106      	bne.n	80035a0 <_printf_common+0x48>
 8003592:	f104 0a19 	add.w	sl, r4, #25
 8003596:	68e3      	ldr	r3, [r4, #12]
 8003598:	6832      	ldr	r2, [r6, #0]
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	42ab      	cmp	r3, r5
 800359e:	dc26      	bgt.n	80035ee <_printf_common+0x96>
 80035a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035a4:	1e13      	subs	r3, r2, #0
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	bf18      	it	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	0692      	lsls	r2, r2, #26
 80035ae:	d42b      	bmi.n	8003608 <_printf_common+0xb0>
 80035b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035b4:	4649      	mov	r1, r9
 80035b6:	4638      	mov	r0, r7
 80035b8:	47c0      	blx	r8
 80035ba:	3001      	adds	r0, #1
 80035bc:	d01e      	beq.n	80035fc <_printf_common+0xa4>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	68e5      	ldr	r5, [r4, #12]
 80035c2:	6832      	ldr	r2, [r6, #0]
 80035c4:	f003 0306 	and.w	r3, r3, #6
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	bf08      	it	eq
 80035cc:	1aad      	subeq	r5, r5, r2
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	bf0c      	ite	eq
 80035d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d8:	2500      	movne	r5, #0
 80035da:	4293      	cmp	r3, r2
 80035dc:	bfc4      	itt	gt
 80035de:	1a9b      	subgt	r3, r3, r2
 80035e0:	18ed      	addgt	r5, r5, r3
 80035e2:	2600      	movs	r6, #0
 80035e4:	341a      	adds	r4, #26
 80035e6:	42b5      	cmp	r5, r6
 80035e8:	d11a      	bne.n	8003620 <_printf_common+0xc8>
 80035ea:	2000      	movs	r0, #0
 80035ec:	e008      	b.n	8003600 <_printf_common+0xa8>
 80035ee:	2301      	movs	r3, #1
 80035f0:	4652      	mov	r2, sl
 80035f2:	4649      	mov	r1, r9
 80035f4:	4638      	mov	r0, r7
 80035f6:	47c0      	blx	r8
 80035f8:	3001      	adds	r0, #1
 80035fa:	d103      	bne.n	8003604 <_printf_common+0xac>
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003604:	3501      	adds	r5, #1
 8003606:	e7c6      	b.n	8003596 <_printf_common+0x3e>
 8003608:	18e1      	adds	r1, r4, r3
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	2030      	movs	r0, #48	; 0x30
 800360e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003612:	4422      	add	r2, r4
 8003614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800361c:	3302      	adds	r3, #2
 800361e:	e7c7      	b.n	80035b0 <_printf_common+0x58>
 8003620:	2301      	movs	r3, #1
 8003622:	4622      	mov	r2, r4
 8003624:	4649      	mov	r1, r9
 8003626:	4638      	mov	r0, r7
 8003628:	47c0      	blx	r8
 800362a:	3001      	adds	r0, #1
 800362c:	d0e6      	beq.n	80035fc <_printf_common+0xa4>
 800362e:	3601      	adds	r6, #1
 8003630:	e7d9      	b.n	80035e6 <_printf_common+0x8e>
	...

08003634 <_printf_i>:
 8003634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003638:	7e0f      	ldrb	r7, [r1, #24]
 800363a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800363c:	2f78      	cmp	r7, #120	; 0x78
 800363e:	4691      	mov	r9, r2
 8003640:	4680      	mov	r8, r0
 8003642:	460c      	mov	r4, r1
 8003644:	469a      	mov	sl, r3
 8003646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800364a:	d807      	bhi.n	800365c <_printf_i+0x28>
 800364c:	2f62      	cmp	r7, #98	; 0x62
 800364e:	d80a      	bhi.n	8003666 <_printf_i+0x32>
 8003650:	2f00      	cmp	r7, #0
 8003652:	f000 80d8 	beq.w	8003806 <_printf_i+0x1d2>
 8003656:	2f58      	cmp	r7, #88	; 0x58
 8003658:	f000 80a3 	beq.w	80037a2 <_printf_i+0x16e>
 800365c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003664:	e03a      	b.n	80036dc <_printf_i+0xa8>
 8003666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800366a:	2b15      	cmp	r3, #21
 800366c:	d8f6      	bhi.n	800365c <_printf_i+0x28>
 800366e:	a101      	add	r1, pc, #4	; (adr r1, 8003674 <_printf_i+0x40>)
 8003670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036e1 	.word	0x080036e1
 800367c:	0800365d 	.word	0x0800365d
 8003680:	0800365d 	.word	0x0800365d
 8003684:	0800365d 	.word	0x0800365d
 8003688:	0800365d 	.word	0x0800365d
 800368c:	080036e1 	.word	0x080036e1
 8003690:	0800365d 	.word	0x0800365d
 8003694:	0800365d 	.word	0x0800365d
 8003698:	0800365d 	.word	0x0800365d
 800369c:	0800365d 	.word	0x0800365d
 80036a0:	080037ed 	.word	0x080037ed
 80036a4:	08003711 	.word	0x08003711
 80036a8:	080037cf 	.word	0x080037cf
 80036ac:	0800365d 	.word	0x0800365d
 80036b0:	0800365d 	.word	0x0800365d
 80036b4:	0800380f 	.word	0x0800380f
 80036b8:	0800365d 	.word	0x0800365d
 80036bc:	08003711 	.word	0x08003711
 80036c0:	0800365d 	.word	0x0800365d
 80036c4:	0800365d 	.word	0x0800365d
 80036c8:	080037d7 	.word	0x080037d7
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	1d1a      	adds	r2, r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	602a      	str	r2, [r5, #0]
 80036d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036dc:	2301      	movs	r3, #1
 80036de:	e0a3      	b.n	8003828 <_printf_i+0x1f4>
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	6829      	ldr	r1, [r5, #0]
 80036e4:	0606      	lsls	r6, r0, #24
 80036e6:	f101 0304 	add.w	r3, r1, #4
 80036ea:	d50a      	bpl.n	8003702 <_printf_i+0xce>
 80036ec:	680e      	ldr	r6, [r1, #0]
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	2e00      	cmp	r6, #0
 80036f2:	da03      	bge.n	80036fc <_printf_i+0xc8>
 80036f4:	232d      	movs	r3, #45	; 0x2d
 80036f6:	4276      	negs	r6, r6
 80036f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036fc:	485e      	ldr	r0, [pc, #376]	; (8003878 <_printf_i+0x244>)
 80036fe:	230a      	movs	r3, #10
 8003700:	e019      	b.n	8003736 <_printf_i+0x102>
 8003702:	680e      	ldr	r6, [r1, #0]
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	f010 0f40 	tst.w	r0, #64	; 0x40
 800370a:	bf18      	it	ne
 800370c:	b236      	sxthne	r6, r6
 800370e:	e7ef      	b.n	80036f0 <_printf_i+0xbc>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	1d19      	adds	r1, r3, #4
 8003716:	6029      	str	r1, [r5, #0]
 8003718:	0601      	lsls	r1, r0, #24
 800371a:	d501      	bpl.n	8003720 <_printf_i+0xec>
 800371c:	681e      	ldr	r6, [r3, #0]
 800371e:	e002      	b.n	8003726 <_printf_i+0xf2>
 8003720:	0646      	lsls	r6, r0, #25
 8003722:	d5fb      	bpl.n	800371c <_printf_i+0xe8>
 8003724:	881e      	ldrh	r6, [r3, #0]
 8003726:	4854      	ldr	r0, [pc, #336]	; (8003878 <_printf_i+0x244>)
 8003728:	2f6f      	cmp	r7, #111	; 0x6f
 800372a:	bf0c      	ite	eq
 800372c:	2308      	moveq	r3, #8
 800372e:	230a      	movne	r3, #10
 8003730:	2100      	movs	r1, #0
 8003732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003736:	6865      	ldr	r5, [r4, #4]
 8003738:	60a5      	str	r5, [r4, #8]
 800373a:	2d00      	cmp	r5, #0
 800373c:	bfa2      	ittt	ge
 800373e:	6821      	ldrge	r1, [r4, #0]
 8003740:	f021 0104 	bicge.w	r1, r1, #4
 8003744:	6021      	strge	r1, [r4, #0]
 8003746:	b90e      	cbnz	r6, 800374c <_printf_i+0x118>
 8003748:	2d00      	cmp	r5, #0
 800374a:	d04d      	beq.n	80037e8 <_printf_i+0x1b4>
 800374c:	4615      	mov	r5, r2
 800374e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003752:	fb03 6711 	mls	r7, r3, r1, r6
 8003756:	5dc7      	ldrb	r7, [r0, r7]
 8003758:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800375c:	4637      	mov	r7, r6
 800375e:	42bb      	cmp	r3, r7
 8003760:	460e      	mov	r6, r1
 8003762:	d9f4      	bls.n	800374e <_printf_i+0x11a>
 8003764:	2b08      	cmp	r3, #8
 8003766:	d10b      	bne.n	8003780 <_printf_i+0x14c>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	07de      	lsls	r6, r3, #31
 800376c:	d508      	bpl.n	8003780 <_printf_i+0x14c>
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	6861      	ldr	r1, [r4, #4]
 8003772:	4299      	cmp	r1, r3
 8003774:	bfde      	ittt	le
 8003776:	2330      	movle	r3, #48	; 0x30
 8003778:	f805 3c01 	strble.w	r3, [r5, #-1]
 800377c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003780:	1b52      	subs	r2, r2, r5
 8003782:	6122      	str	r2, [r4, #16]
 8003784:	f8cd a000 	str.w	sl, [sp]
 8003788:	464b      	mov	r3, r9
 800378a:	aa03      	add	r2, sp, #12
 800378c:	4621      	mov	r1, r4
 800378e:	4640      	mov	r0, r8
 8003790:	f7ff fee2 	bl	8003558 <_printf_common>
 8003794:	3001      	adds	r0, #1
 8003796:	d14c      	bne.n	8003832 <_printf_i+0x1fe>
 8003798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800379c:	b004      	add	sp, #16
 800379e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a2:	4835      	ldr	r0, [pc, #212]	; (8003878 <_printf_i+0x244>)
 80037a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037a8:	6829      	ldr	r1, [r5, #0]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80037b0:	6029      	str	r1, [r5, #0]
 80037b2:	061d      	lsls	r5, r3, #24
 80037b4:	d514      	bpl.n	80037e0 <_printf_i+0x1ac>
 80037b6:	07df      	lsls	r7, r3, #31
 80037b8:	bf44      	itt	mi
 80037ba:	f043 0320 	orrmi.w	r3, r3, #32
 80037be:	6023      	strmi	r3, [r4, #0]
 80037c0:	b91e      	cbnz	r6, 80037ca <_printf_i+0x196>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f023 0320 	bic.w	r3, r3, #32
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	2310      	movs	r3, #16
 80037cc:	e7b0      	b.n	8003730 <_printf_i+0xfc>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	f043 0320 	orr.w	r3, r3, #32
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	2378      	movs	r3, #120	; 0x78
 80037d8:	4828      	ldr	r0, [pc, #160]	; (800387c <_printf_i+0x248>)
 80037da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037de:	e7e3      	b.n	80037a8 <_printf_i+0x174>
 80037e0:	0659      	lsls	r1, r3, #25
 80037e2:	bf48      	it	mi
 80037e4:	b2b6      	uxthmi	r6, r6
 80037e6:	e7e6      	b.n	80037b6 <_printf_i+0x182>
 80037e8:	4615      	mov	r5, r2
 80037ea:	e7bb      	b.n	8003764 <_printf_i+0x130>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	6826      	ldr	r6, [r4, #0]
 80037f0:	6961      	ldr	r1, [r4, #20]
 80037f2:	1d18      	adds	r0, r3, #4
 80037f4:	6028      	str	r0, [r5, #0]
 80037f6:	0635      	lsls	r5, r6, #24
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	d501      	bpl.n	8003800 <_printf_i+0x1cc>
 80037fc:	6019      	str	r1, [r3, #0]
 80037fe:	e002      	b.n	8003806 <_printf_i+0x1d2>
 8003800:	0670      	lsls	r0, r6, #25
 8003802:	d5fb      	bpl.n	80037fc <_printf_i+0x1c8>
 8003804:	8019      	strh	r1, [r3, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	6123      	str	r3, [r4, #16]
 800380a:	4615      	mov	r5, r2
 800380c:	e7ba      	b.n	8003784 <_printf_i+0x150>
 800380e:	682b      	ldr	r3, [r5, #0]
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	602a      	str	r2, [r5, #0]
 8003814:	681d      	ldr	r5, [r3, #0]
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	2100      	movs	r1, #0
 800381a:	4628      	mov	r0, r5
 800381c:	f7fc fce8 	bl	80001f0 <memchr>
 8003820:	b108      	cbz	r0, 8003826 <_printf_i+0x1f2>
 8003822:	1b40      	subs	r0, r0, r5
 8003824:	6060      	str	r0, [r4, #4]
 8003826:	6863      	ldr	r3, [r4, #4]
 8003828:	6123      	str	r3, [r4, #16]
 800382a:	2300      	movs	r3, #0
 800382c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003830:	e7a8      	b.n	8003784 <_printf_i+0x150>
 8003832:	6923      	ldr	r3, [r4, #16]
 8003834:	462a      	mov	r2, r5
 8003836:	4649      	mov	r1, r9
 8003838:	4640      	mov	r0, r8
 800383a:	47d0      	blx	sl
 800383c:	3001      	adds	r0, #1
 800383e:	d0ab      	beq.n	8003798 <_printf_i+0x164>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	079b      	lsls	r3, r3, #30
 8003844:	d413      	bmi.n	800386e <_printf_i+0x23a>
 8003846:	68e0      	ldr	r0, [r4, #12]
 8003848:	9b03      	ldr	r3, [sp, #12]
 800384a:	4298      	cmp	r0, r3
 800384c:	bfb8      	it	lt
 800384e:	4618      	movlt	r0, r3
 8003850:	e7a4      	b.n	800379c <_printf_i+0x168>
 8003852:	2301      	movs	r3, #1
 8003854:	4632      	mov	r2, r6
 8003856:	4649      	mov	r1, r9
 8003858:	4640      	mov	r0, r8
 800385a:	47d0      	blx	sl
 800385c:	3001      	adds	r0, #1
 800385e:	d09b      	beq.n	8003798 <_printf_i+0x164>
 8003860:	3501      	adds	r5, #1
 8003862:	68e3      	ldr	r3, [r4, #12]
 8003864:	9903      	ldr	r1, [sp, #12]
 8003866:	1a5b      	subs	r3, r3, r1
 8003868:	42ab      	cmp	r3, r5
 800386a:	dcf2      	bgt.n	8003852 <_printf_i+0x21e>
 800386c:	e7eb      	b.n	8003846 <_printf_i+0x212>
 800386e:	2500      	movs	r5, #0
 8003870:	f104 0619 	add.w	r6, r4, #25
 8003874:	e7f5      	b.n	8003862 <_printf_i+0x22e>
 8003876:	bf00      	nop
 8003878:	08003bdd 	.word	0x08003bdd
 800387c:	08003bee 	.word	0x08003bee

08003880 <memcpy>:
 8003880:	440a      	add	r2, r1
 8003882:	4291      	cmp	r1, r2
 8003884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003888:	d100      	bne.n	800388c <memcpy+0xc>
 800388a:	4770      	bx	lr
 800388c:	b510      	push	{r4, lr}
 800388e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003896:	4291      	cmp	r1, r2
 8003898:	d1f9      	bne.n	800388e <memcpy+0xe>
 800389a:	bd10      	pop	{r4, pc}

0800389c <memmove>:
 800389c:	4288      	cmp	r0, r1
 800389e:	b510      	push	{r4, lr}
 80038a0:	eb01 0402 	add.w	r4, r1, r2
 80038a4:	d902      	bls.n	80038ac <memmove+0x10>
 80038a6:	4284      	cmp	r4, r0
 80038a8:	4623      	mov	r3, r4
 80038aa:	d807      	bhi.n	80038bc <memmove+0x20>
 80038ac:	1e43      	subs	r3, r0, #1
 80038ae:	42a1      	cmp	r1, r4
 80038b0:	d008      	beq.n	80038c4 <memmove+0x28>
 80038b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ba:	e7f8      	b.n	80038ae <memmove+0x12>
 80038bc:	4402      	add	r2, r0
 80038be:	4601      	mov	r1, r0
 80038c0:	428a      	cmp	r2, r1
 80038c2:	d100      	bne.n	80038c6 <memmove+0x2a>
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ce:	e7f7      	b.n	80038c0 <memmove+0x24>

080038d0 <_free_r>:
 80038d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038d2:	2900      	cmp	r1, #0
 80038d4:	d044      	beq.n	8003960 <_free_r+0x90>
 80038d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038da:	9001      	str	r0, [sp, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f1a1 0404 	sub.w	r4, r1, #4
 80038e2:	bfb8      	it	lt
 80038e4:	18e4      	addlt	r4, r4, r3
 80038e6:	f000 f913 	bl	8003b10 <__malloc_lock>
 80038ea:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <_free_r+0x94>)
 80038ec:	9801      	ldr	r0, [sp, #4]
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	b933      	cbnz	r3, 8003900 <_free_r+0x30>
 80038f2:	6063      	str	r3, [r4, #4]
 80038f4:	6014      	str	r4, [r2, #0]
 80038f6:	b003      	add	sp, #12
 80038f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038fc:	f000 b90e 	b.w	8003b1c <__malloc_unlock>
 8003900:	42a3      	cmp	r3, r4
 8003902:	d908      	bls.n	8003916 <_free_r+0x46>
 8003904:	6825      	ldr	r5, [r4, #0]
 8003906:	1961      	adds	r1, r4, r5
 8003908:	428b      	cmp	r3, r1
 800390a:	bf01      	itttt	eq
 800390c:	6819      	ldreq	r1, [r3, #0]
 800390e:	685b      	ldreq	r3, [r3, #4]
 8003910:	1949      	addeq	r1, r1, r5
 8003912:	6021      	streq	r1, [r4, #0]
 8003914:	e7ed      	b.n	80038f2 <_free_r+0x22>
 8003916:	461a      	mov	r2, r3
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	b10b      	cbz	r3, 8003920 <_free_r+0x50>
 800391c:	42a3      	cmp	r3, r4
 800391e:	d9fa      	bls.n	8003916 <_free_r+0x46>
 8003920:	6811      	ldr	r1, [r2, #0]
 8003922:	1855      	adds	r5, r2, r1
 8003924:	42a5      	cmp	r5, r4
 8003926:	d10b      	bne.n	8003940 <_free_r+0x70>
 8003928:	6824      	ldr	r4, [r4, #0]
 800392a:	4421      	add	r1, r4
 800392c:	1854      	adds	r4, r2, r1
 800392e:	42a3      	cmp	r3, r4
 8003930:	6011      	str	r1, [r2, #0]
 8003932:	d1e0      	bne.n	80038f6 <_free_r+0x26>
 8003934:	681c      	ldr	r4, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	6053      	str	r3, [r2, #4]
 800393a:	4421      	add	r1, r4
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	e7da      	b.n	80038f6 <_free_r+0x26>
 8003940:	d902      	bls.n	8003948 <_free_r+0x78>
 8003942:	230c      	movs	r3, #12
 8003944:	6003      	str	r3, [r0, #0]
 8003946:	e7d6      	b.n	80038f6 <_free_r+0x26>
 8003948:	6825      	ldr	r5, [r4, #0]
 800394a:	1961      	adds	r1, r4, r5
 800394c:	428b      	cmp	r3, r1
 800394e:	bf04      	itt	eq
 8003950:	6819      	ldreq	r1, [r3, #0]
 8003952:	685b      	ldreq	r3, [r3, #4]
 8003954:	6063      	str	r3, [r4, #4]
 8003956:	bf04      	itt	eq
 8003958:	1949      	addeq	r1, r1, r5
 800395a:	6021      	streq	r1, [r4, #0]
 800395c:	6054      	str	r4, [r2, #4]
 800395e:	e7ca      	b.n	80038f6 <_free_r+0x26>
 8003960:	b003      	add	sp, #12
 8003962:	bd30      	pop	{r4, r5, pc}
 8003964:	2000012c 	.word	0x2000012c

08003968 <sbrk_aligned>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	4e0e      	ldr	r6, [pc, #56]	; (80039a4 <sbrk_aligned+0x3c>)
 800396c:	460c      	mov	r4, r1
 800396e:	6831      	ldr	r1, [r6, #0]
 8003970:	4605      	mov	r5, r0
 8003972:	b911      	cbnz	r1, 800397a <sbrk_aligned+0x12>
 8003974:	f000 f8bc 	bl	8003af0 <_sbrk_r>
 8003978:	6030      	str	r0, [r6, #0]
 800397a:	4621      	mov	r1, r4
 800397c:	4628      	mov	r0, r5
 800397e:	f000 f8b7 	bl	8003af0 <_sbrk_r>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	d00a      	beq.n	800399c <sbrk_aligned+0x34>
 8003986:	1cc4      	adds	r4, r0, #3
 8003988:	f024 0403 	bic.w	r4, r4, #3
 800398c:	42a0      	cmp	r0, r4
 800398e:	d007      	beq.n	80039a0 <sbrk_aligned+0x38>
 8003990:	1a21      	subs	r1, r4, r0
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f8ac 	bl	8003af0 <_sbrk_r>
 8003998:	3001      	adds	r0, #1
 800399a:	d101      	bne.n	80039a0 <sbrk_aligned+0x38>
 800399c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039a0:	4620      	mov	r0, r4
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	20000130 	.word	0x20000130

080039a8 <_malloc_r>:
 80039a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ac:	1ccd      	adds	r5, r1, #3
 80039ae:	f025 0503 	bic.w	r5, r5, #3
 80039b2:	3508      	adds	r5, #8
 80039b4:	2d0c      	cmp	r5, #12
 80039b6:	bf38      	it	cc
 80039b8:	250c      	movcc	r5, #12
 80039ba:	2d00      	cmp	r5, #0
 80039bc:	4607      	mov	r7, r0
 80039be:	db01      	blt.n	80039c4 <_malloc_r+0x1c>
 80039c0:	42a9      	cmp	r1, r5
 80039c2:	d905      	bls.n	80039d0 <_malloc_r+0x28>
 80039c4:	230c      	movs	r3, #12
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	2600      	movs	r6, #0
 80039ca:	4630      	mov	r0, r6
 80039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d0:	4e2e      	ldr	r6, [pc, #184]	; (8003a8c <_malloc_r+0xe4>)
 80039d2:	f000 f89d 	bl	8003b10 <__malloc_lock>
 80039d6:	6833      	ldr	r3, [r6, #0]
 80039d8:	461c      	mov	r4, r3
 80039da:	bb34      	cbnz	r4, 8003a2a <_malloc_r+0x82>
 80039dc:	4629      	mov	r1, r5
 80039de:	4638      	mov	r0, r7
 80039e0:	f7ff ffc2 	bl	8003968 <sbrk_aligned>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	4604      	mov	r4, r0
 80039e8:	d14d      	bne.n	8003a86 <_malloc_r+0xde>
 80039ea:	6834      	ldr	r4, [r6, #0]
 80039ec:	4626      	mov	r6, r4
 80039ee:	2e00      	cmp	r6, #0
 80039f0:	d140      	bne.n	8003a74 <_malloc_r+0xcc>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	4631      	mov	r1, r6
 80039f6:	4638      	mov	r0, r7
 80039f8:	eb04 0803 	add.w	r8, r4, r3
 80039fc:	f000 f878 	bl	8003af0 <_sbrk_r>
 8003a00:	4580      	cmp	r8, r0
 8003a02:	d13a      	bne.n	8003a7a <_malloc_r+0xd2>
 8003a04:	6821      	ldr	r1, [r4, #0]
 8003a06:	3503      	adds	r5, #3
 8003a08:	1a6d      	subs	r5, r5, r1
 8003a0a:	f025 0503 	bic.w	r5, r5, #3
 8003a0e:	3508      	adds	r5, #8
 8003a10:	2d0c      	cmp	r5, #12
 8003a12:	bf38      	it	cc
 8003a14:	250c      	movcc	r5, #12
 8003a16:	4629      	mov	r1, r5
 8003a18:	4638      	mov	r0, r7
 8003a1a:	f7ff ffa5 	bl	8003968 <sbrk_aligned>
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d02b      	beq.n	8003a7a <_malloc_r+0xd2>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	442b      	add	r3, r5
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	e00e      	b.n	8003a48 <_malloc_r+0xa0>
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	1b52      	subs	r2, r2, r5
 8003a2e:	d41e      	bmi.n	8003a6e <_malloc_r+0xc6>
 8003a30:	2a0b      	cmp	r2, #11
 8003a32:	d916      	bls.n	8003a62 <_malloc_r+0xba>
 8003a34:	1961      	adds	r1, r4, r5
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	6025      	str	r5, [r4, #0]
 8003a3a:	bf18      	it	ne
 8003a3c:	6059      	strne	r1, [r3, #4]
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	bf08      	it	eq
 8003a42:	6031      	streq	r1, [r6, #0]
 8003a44:	5162      	str	r2, [r4, r5]
 8003a46:	604b      	str	r3, [r1, #4]
 8003a48:	4638      	mov	r0, r7
 8003a4a:	f104 060b 	add.w	r6, r4, #11
 8003a4e:	f000 f865 	bl	8003b1c <__malloc_unlock>
 8003a52:	f026 0607 	bic.w	r6, r6, #7
 8003a56:	1d23      	adds	r3, r4, #4
 8003a58:	1af2      	subs	r2, r6, r3
 8003a5a:	d0b6      	beq.n	80039ca <_malloc_r+0x22>
 8003a5c:	1b9b      	subs	r3, r3, r6
 8003a5e:	50a3      	str	r3, [r4, r2]
 8003a60:	e7b3      	b.n	80039ca <_malloc_r+0x22>
 8003a62:	6862      	ldr	r2, [r4, #4]
 8003a64:	42a3      	cmp	r3, r4
 8003a66:	bf0c      	ite	eq
 8003a68:	6032      	streq	r2, [r6, #0]
 8003a6a:	605a      	strne	r2, [r3, #4]
 8003a6c:	e7ec      	b.n	8003a48 <_malloc_r+0xa0>
 8003a6e:	4623      	mov	r3, r4
 8003a70:	6864      	ldr	r4, [r4, #4]
 8003a72:	e7b2      	b.n	80039da <_malloc_r+0x32>
 8003a74:	4634      	mov	r4, r6
 8003a76:	6876      	ldr	r6, [r6, #4]
 8003a78:	e7b9      	b.n	80039ee <_malloc_r+0x46>
 8003a7a:	230c      	movs	r3, #12
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f000 f84c 	bl	8003b1c <__malloc_unlock>
 8003a84:	e7a1      	b.n	80039ca <_malloc_r+0x22>
 8003a86:	6025      	str	r5, [r4, #0]
 8003a88:	e7de      	b.n	8003a48 <_malloc_r+0xa0>
 8003a8a:	bf00      	nop
 8003a8c:	2000012c 	.word	0x2000012c

08003a90 <_realloc_r>:
 8003a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a94:	4680      	mov	r8, r0
 8003a96:	4614      	mov	r4, r2
 8003a98:	460e      	mov	r6, r1
 8003a9a:	b921      	cbnz	r1, 8003aa6 <_realloc_r+0x16>
 8003a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	f7ff bf81 	b.w	80039a8 <_malloc_r>
 8003aa6:	b92a      	cbnz	r2, 8003ab4 <_realloc_r+0x24>
 8003aa8:	f7ff ff12 	bl	80038d0 <_free_r>
 8003aac:	4625      	mov	r5, r4
 8003aae:	4628      	mov	r0, r5
 8003ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab4:	f000 f838 	bl	8003b28 <_malloc_usable_size_r>
 8003ab8:	4284      	cmp	r4, r0
 8003aba:	4607      	mov	r7, r0
 8003abc:	d802      	bhi.n	8003ac4 <_realloc_r+0x34>
 8003abe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ac2:	d812      	bhi.n	8003aea <_realloc_r+0x5a>
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	f7ff ff6e 	bl	80039a8 <_malloc_r>
 8003acc:	4605      	mov	r5, r0
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d0ed      	beq.n	8003aae <_realloc_r+0x1e>
 8003ad2:	42bc      	cmp	r4, r7
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	bf28      	it	cs
 8003ada:	463a      	movcs	r2, r7
 8003adc:	f7ff fed0 	bl	8003880 <memcpy>
 8003ae0:	4631      	mov	r1, r6
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	f7ff fef4 	bl	80038d0 <_free_r>
 8003ae8:	e7e1      	b.n	8003aae <_realloc_r+0x1e>
 8003aea:	4635      	mov	r5, r6
 8003aec:	e7df      	b.n	8003aae <_realloc_r+0x1e>
	...

08003af0 <_sbrk_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4d06      	ldr	r5, [pc, #24]	; (8003b0c <_sbrk_r+0x1c>)
 8003af4:	2300      	movs	r3, #0
 8003af6:	4604      	mov	r4, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	f7fd fe2e 	bl	800175c <_sbrk>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_sbrk_r+0x1a>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_sbrk_r+0x1a>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000134 	.word	0x20000134

08003b10 <__malloc_lock>:
 8003b10:	4801      	ldr	r0, [pc, #4]	; (8003b18 <__malloc_lock+0x8>)
 8003b12:	f000 b811 	b.w	8003b38 <__retarget_lock_acquire_recursive>
 8003b16:	bf00      	nop
 8003b18:	20000138 	.word	0x20000138

08003b1c <__malloc_unlock>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	; (8003b24 <__malloc_unlock+0x8>)
 8003b1e:	f000 b80c 	b.w	8003b3a <__retarget_lock_release_recursive>
 8003b22:	bf00      	nop
 8003b24:	20000138 	.word	0x20000138

08003b28 <_malloc_usable_size_r>:
 8003b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b2c:	1f18      	subs	r0, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfbc      	itt	lt
 8003b32:	580b      	ldrlt	r3, [r1, r0]
 8003b34:	18c0      	addlt	r0, r0, r3
 8003b36:	4770      	bx	lr

08003b38 <__retarget_lock_acquire_recursive>:
 8003b38:	4770      	bx	lr

08003b3a <__retarget_lock_release_recursive>:
 8003b3a:	4770      	bx	lr

08003b3c <_init>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr

08003b48 <_fini>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr
